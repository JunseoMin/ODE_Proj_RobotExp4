
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000e5e  00000ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  00800122  00800122  00000f14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148d  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a00  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  0000399c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b3  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000661  00000000  00000000  0000466f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004cd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ac c0       	rjmp	.+344    	; 0x19a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	89 c0       	rjmp	.+274    	; 0x15c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 39       	cpi	r26, 0x9D	; 157
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	af d2       	rcall	.+1374   	; 0x622 <main>
  c4:	ca c6       	rjmp	.+3476   	; 0xe5a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SetDutyCW>:
volatile double Kd_pos = 0.01;


void SetDutyCW(double v){
	
	while(TCNT1  == 0);
  c8:	2c b5       	in	r18, 0x2c	; 44
  ca:	3d b5       	in	r19, 0x2d	; 45
  cc:	23 2b       	or	r18, r19
  ce:	e1 f3       	breq	.-8      	; 0xc8 <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
  d0:	25 e5       	ldi	r18, 0x55	; 85
  d2:	35 e5       	ldi	r19, 0x55	; 85
  d4:	45 e0       	ldi	r20, 0x05	; 5
  d6:	51 e4       	ldi	r21, 0x41	; 65
  d8:	5d d6       	rcall	.+3258   	; 0xd94 <__mulsf3>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	48 e4       	ldi	r20, 0x48	; 72
  e0:	53 e4       	ldi	r21, 0x43	; 67
  e2:	cd d4       	rcall	.+2458   	; 0xa7e <__addsf3>
  e4:	98 d5       	rcall	.+2864   	; 0xc16 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
  e6:	67 38       	cpi	r22, 0x87	; 135
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	78 07       	cpc	r23, r24
  ec:	34 f4       	brge	.+12     	; 0xfa <SetDutyCW+0x32>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
  ee:	6a 30       	cpi	r22, 0x0A	; 10
  f0:	71 05       	cpc	r23, r1
  f2:	2c f4       	brge	.+10     	; 0xfe <SetDutyCW+0x36>
  f4:	6a e0       	ldi	r22, 0x0A	; 10
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <SetDutyCW+0x36>
	
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
  fa:	66 e8       	ldi	r22, 0x86	; 134
  fc:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
  fe:	cb 01       	movw	r24, r22
 100:	08 96       	adiw	r24, 0x08	; 8
 102:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	9b bd       	out	0x2b, r25	; 43
 10c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
 10e:	68 50       	subi	r22, 0x08	; 8
 110:	71 09       	sbc	r23, r1
 112:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 116:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 11a:	79 bd       	out	0x29, r23	; 41
 11c:	68 bd       	out	0x28, r22	; 40
 11e:	08 95       	ret

00000120 <InitLS7366>:
}


void InitLS7366(){
 120:	cf 93       	push	r28
	
	PORTB = 0x00;
 122:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
 124:	88 e8       	ldi	r24, 0x88	; 136
 126:	a0 d4       	rcall	.+2368   	; 0xa68 <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
 128:	83 e4       	ldi	r24, 0x43	; 67
 12a:	9e d4       	rcall	.+2364   	; 0xa68 <SPI_MasterSend>
	PORTB = 0x01;
 12c:	c1 e0       	ldi	r28, 0x01	; 1
 12e:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
 130:	18 ba       	out	0x18, r1	; 24
 132:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
 134:	99 d4       	rcall	.+2354   	; 0xa68 <SPI_MasterSend>
 136:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
 138:	97 d4       	rcall	.+2350   	; 0xa68 <SPI_MasterSend>
	
	PORTB = 0x00;
 13a:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
 13c:	18 ba       	out	0x18, r1	; 24
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	93 d4       	rcall	.+2342   	; 0xa68 <SPI_MasterSend>
	PORTB = 0x01;
 142:	c8 bb       	out	0x18, r28	; 24
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <getADC>:



int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
 148:	97 b1       	in	r25, 0x07	; 7
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	89 0f       	add	r24, r25
 14e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
 150:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
 152:	34 9b       	sbis	0x06, 4	; 6
 154:	fe cf       	rjmp	.-4      	; 0x152 <getADC+0xa>
	return ADC;
 156:	84 b1       	in	r24, 0x04	; 4
 158:	95 b1       	in	r25, 0x05	; 5
}
 15a:	08 95       	ret

0000015c <__vector_18>:




ISR(USART0_RX_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0b b6       	in	r0, 0x3b	; 59
 168:	0f 92       	push	r0
 16a:	8f 93       	push	r24
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31

	g_buf[g_BufWriteCnt++] = UDR0;
 170:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <g_BufWriteCnt>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	8e 0f       	add	r24, r30
 178:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_BufWriteCnt>
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	8c b1       	in	r24, 0x0c	; 12
 180:	ee 5c       	subi	r30, 0xCE	; 206
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	80 83       	st	Z, r24
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0b be       	out	0x3b, r0	; 59
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_16>:




//ISR(TIMER3_OVF_vect){
ISR(TIMER0_OVF_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	cf 93       	push	r28
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
			
	TCNT0 = 256 - 125;
 1d2:	83 e8       	ldi	r24, 0x83	; 131
 1d4:	82 bf       	out	0x32, r24	; 50
	//TCNT3 = 65536 - 125;		
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
 1d6:	c1 e0       	ldi	r28, 0x01	; 1
 1d8:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	b5 df       	rcall	.-150    	; 0x148 <getADC>
 1de:	bc 01       	movw	r22, r24
 1e0:	99 0f       	add	r25, r25
 1e2:	88 0b       	sbc	r24, r24
 1e4:	99 0b       	sbc	r25, r25
 1e6:	4a d5       	rcall	.+2708   	; 0xc7c <__floatsisf>
 1e8:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <g_ADC>
 1ec:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <g_ADC+0x1>
 1f0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_ADC+0x2>
 1f4:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_ADC+0x3>
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | LOAD_REG);
 1f8:	18 ba       	out	0x18, r1	; 24
 1fa:	88 ee       	ldi	r24, 0xE8	; 232
 1fc:	35 d4       	rcall	.+2154   	; 0xa68 <SPI_MasterSend>
	PORTB = 0x01;
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
 1fe:	c8 bb       	out	0x18, r28	; 24
 200:	18 ba       	out	0x18, r1	; 24
 202:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
 204:	31 d4       	rcall	.+2146   	; 0xa68 <SPI_MasterSend>
 206:	35 d4       	rcall	.+2154   	; 0xa72 <SPI_MasterRecv>
 208:	c8 2e       	mov	r12, r24
 20a:	d1 2c       	mov	r13, r1
 20c:	e1 2c       	mov	r14, r1
 20e:	f1 2c       	mov	r15, r1
 210:	fe 2c       	mov	r15, r14
 212:	ed 2c       	mov	r14, r13
 214:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
 216:	cc 24       	eor	r12, r12
 218:	2c d4       	rcall	.+2136   	; 0xa72 <SPI_MasterRecv>
 21a:	c8 2a       	or	r12, r24
 21c:	fe 2c       	mov	r15, r14
 21e:	ed 2c       	mov	r14, r13
 220:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
 222:	cc 24       	eor	r12, r12
 224:	26 d4       	rcall	.+2124   	; 0xa72 <SPI_MasterRecv>
 226:	c8 2a       	or	r12, r24
 228:	fe 2c       	mov	r15, r14
 22a:	ed 2c       	mov	r14, r13
 22c:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
 22e:	cc 24       	eor	r12, r12
 230:	20 d4       	rcall	.+2112   	; 0xa72 <SPI_MasterRecv>
	PORTB = 0x01;
 232:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
 234:	c8 2a       	or	r12, r24
 236:	f0 94       	com	r15
 238:	e0 94       	com	r14
 23a:	d0 94       	com	r13
 23c:	c0 94       	com	r12
 23e:	c1 1c       	adc	r12, r1
 240:	d1 1c       	adc	r13, r1
 242:	e1 1c       	adc	r14, r1
 244:	f1 1c       	adc	r15, r1
 246:	c0 92 8b 02 	sts	0x028B, r12	; 0x80028b <g_Cnt>
 24a:	d0 92 8c 02 	sts	0x028C, r13	; 0x80028c <g_Cnt+0x1>
 24e:	e0 92 8d 02 	sts	0x028D, r14	; 0x80028d <g_Cnt+0x2>
 252:	f0 92 8e 02 	sts	0x028E, r15	; 0x80028e <g_Cnt+0x3>
	
	PORTC = 0x03;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	85 bb       	out	0x15, r24	; 21
	
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI; //[rpm]
 25a:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <g_Cnt>
 25e:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <g_Cnt+0x1>
 262:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <g_Cnt+0x2>
 266:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <g_Cnt+0x3>
 26a:	08 d5       	rcall	.+2576   	; 0xc7c <__floatsisf>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	42 ea       	ldi	r20, 0xA2	; 162
 272:	58 e4       	ldi	r21, 0x48	; 72
 274:	68 d4       	rcall	.+2256   	; 0xb46 <__divsf3>
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	01 d4       	rcall	.+2050   	; 0xa7e <__addsf3>
 27c:	2b ed       	ldi	r18, 0xDB	; 219
 27e:	3f e0       	ldi	r19, 0x0F	; 15
 280:	49 e4       	ldi	r20, 0x49	; 73
 282:	50 e4       	ldi	r21, 0x40	; 64
 284:	87 d5       	rcall	.+2830   	; 0xd94 <__mulsf3>
 286:	60 93 90 02 	sts	0x0290, r22	; 0x800290 <g_Pcur>
 28a:	70 93 91 02 	sts	0x0291, r23	; 0x800291 <g_Pcur+0x1>
 28e:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <g_Pcur+0x2>
 292:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <g_Pcur+0x3>
	g_Ccur = -(((g_ADC / 1024. * 5.) - 2.5) * 10. );
 296:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_ADC>
 29a:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_ADC+0x1>
 29e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_ADC+0x2>
 2a2:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_ADC+0x3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e8       	ldi	r20, 0x80	; 128
 2ac:	5a e3       	ldi	r21, 0x3A	; 58
 2ae:	72 d5       	rcall	.+2788   	; 0xd94 <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 ea       	ldi	r20, 0xA0	; 160
 2b6:	50 e4       	ldi	r21, 0x40	; 64
 2b8:	6d d5       	rcall	.+2778   	; 0xd94 <__mulsf3>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e2       	ldi	r20, 0x20	; 32
 2c0:	50 e4       	ldi	r21, 0x40	; 64
 2c2:	dc d3       	rcall	.+1976   	; 0xa7c <__subsf3>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e2       	ldi	r20, 0x20	; 32
 2ca:	51 e4       	ldi	r21, 0x41	; 65
 2cc:	63 d5       	rcall	.+2758   	; 0xd94 <__mulsf3>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	b0 58       	subi	r27, 0x80	; 128
 2d4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_Ccur>
 2d8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_Ccur+0x1>
 2dc:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <g_Ccur+0x2>
 2e0:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <g_Ccur+0x3>
	
	//TO DO : PID control (11/29)
	//
	if((g_TimerCnt % 100) == 0){
 2e4:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <g_TimerCnt>
 2e8:	89 e2       	ldi	r24, 0x29	; 41
 2ea:	98 9f       	mul	r25, r24
 2ec:	81 2d       	mov	r24, r1
 2ee:	11 24       	eor	r1, r1
 2f0:	82 95       	swap	r24
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	24 e6       	ldi	r18, 0x64	; 100
 2f6:	82 9f       	mul	r24, r18
 2f8:	90 19       	sub	r25, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	91 11       	cpse	r25, r1
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <__vector_16+0x16a>
		
		g_TimerCnt = 0;
 300:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <g_TimerCnt>
		
	}
	if((g_TimerCnt % 10) == 0){
 304:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <g_TimerCnt>
 308:	8d ec       	ldi	r24, 0xCD	; 205
 30a:	28 9f       	mul	r18, r24
 30c:	81 2d       	mov	r24, r1
 30e:	11 24       	eor	r1, r1
 310:	86 95       	lsr	r24
 312:	86 95       	lsr	r24
 314:	86 95       	lsr	r24
 316:	88 0f       	add	r24, r24
 318:	98 2f       	mov	r25, r24
 31a:	99 0f       	add	r25, r25
 31c:	99 0f       	add	r25, r25
 31e:	89 0f       	add	r24, r25
 320:	28 13       	cpse	r18, r24
 322:	2e c0       	rjmp	.+92     	; 0x380 <__vector_16+0x1e6>
		
		g_Vcur = (g_Pcur - g_Pvcur) / 0.005; //[rpm/s]
 324:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <g_Pcur>
 328:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <g_Pcur+0x1>
 32c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <g_Pcur+0x2>
 330:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <g_Pcur+0x3>
 334:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <g_Pvcur>
 338:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <g_Pvcur+0x1>
 33c:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <g_Pvcur+0x2>
 340:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <g_Pvcur+0x3>
 344:	9b d3       	rcall	.+1846   	; 0xa7c <__subsf3>
 346:	2a e0       	ldi	r18, 0x0A	; 10
 348:	37 ed       	ldi	r19, 0xD7	; 215
 34a:	43 ea       	ldi	r20, 0xA3	; 163
 34c:	5b e3       	ldi	r21, 0x3B	; 59
 34e:	fb d3       	rcall	.+2038   	; 0xb46 <__divsf3>
 350:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Vcur>
 354:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Vcur+0x1>
 358:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Vcur+0x2>
 35c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Vcur+0x3>
		g_Pvcur = g_Pcur;
 360:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <g_Pcur>
 364:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <g_Pcur+0x1>
 368:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <g_Pcur+0x2>
 36c:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <g_Pcur+0x3>
 370:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <g_Pvcur>
 374:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <g_Pvcur+0x1>
 378:	a0 93 96 02 	sts	0x0296, r26	; 0x800296 <g_Pvcur+0x2>
 37c:	b0 93 97 02 	sts	0x0297, r27	; 0x800297 <g_Pvcur+0x3>
	}
	g_TimerCnt++;
 380:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_TimerCnt>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <g_TimerCnt>
	
	g_Cdes = -0.1;
 38a:	8d ec       	ldi	r24, 0xCD	; 205
 38c:	9c ec       	ldi	r25, 0xCC	; 204
 38e:	ac ec       	ldi	r26, 0xCC	; 204
 390:	bd eb       	ldi	r27, 0xBD	; 189
 392:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_Cdes>
 396:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_Cdes+0x1>
 39a:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <g_Cdes+0x2>
 39e:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <g_Cdes+0x3>
	
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);
 3a2:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_ADC>
 3a6:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_ADC+0x1>
 3aa:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_ADC+0x2>
 3ae:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_ADC+0x3>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e8       	ldi	r20, 0x80	; 128
 3b8:	5a e3       	ldi	r21, 0x3A	; 58
 3ba:	ec d4       	rcall	.+2520   	; 0xd94 <__mulsf3>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	40 ea       	ldi	r20, 0xA0	; 160
 3c2:	50 e4       	ldi	r21, 0x40	; 64
 3c4:	e7 d4       	rcall	.+2510   	; 0xd94 <__mulsf3>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e2       	ldi	r20, 0x20	; 32
 3cc:	50 e4       	ldi	r21, 0x40	; 64
 3ce:	56 d3       	rcall	.+1708   	; 0xa7c <__subsf3>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e2       	ldi	r20, 0x20	; 32
 3d6:	51 e4       	ldi	r21, 0x41	; 65
 3d8:	dd d4       	rcall	.+2490   	; 0xd94 <__mulsf3>
 3da:	dc 01       	movw	r26, r24
 3dc:	cb 01       	movw	r24, r22
 3de:	b0 58       	subi	r27, 0x80	; 128
 3e0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_Ccur>
 3e4:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_Ccur+0x1>
 3e8:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <g_Ccur+0x2>
 3ec:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <g_Ccur+0x3>
	g_Cerr = g_Cdes - g_Ccur;
 3f0:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <g_Cdes>
 3f4:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <g_Cdes+0x1>
 3f8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <g_Cdes+0x2>
 3fc:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <g_Cdes+0x3>
 400:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <g_Ccur>
 404:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <g_Ccur+0x1>
 408:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <g_Ccur+0x2>
 40c:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <g_Ccur+0x3>
 410:	35 d3       	rcall	.+1642   	; 0xa7c <__subsf3>
 412:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <g_Cerr>
 416:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <g_Cerr+0x1>
 41a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <g_Cerr+0x2>
 41e:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <g_Cerr+0x3>

	cur_control = g_Cerr * 0.1 + g_Cerr_sum * 1.5;
 422:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Cerr>
 426:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Cerr+0x1>
 42a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Cerr+0x2>
 42e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Cerr+0x3>
 432:	80 90 98 02 	lds	r8, 0x0298	; 0x800298 <g_Cerr_sum>
 436:	90 90 99 02 	lds	r9, 0x0299	; 0x800299 <g_Cerr_sum+0x1>
 43a:	a0 90 9a 02 	lds	r10, 0x029A	; 0x80029a <g_Cerr_sum+0x2>
 43e:	b0 90 9b 02 	lds	r11, 0x029B	; 0x80029b <g_Cerr_sum+0x3>
 442:	2d ec       	ldi	r18, 0xCD	; 205
 444:	3c ec       	ldi	r19, 0xCC	; 204
 446:	4c ec       	ldi	r20, 0xCC	; 204
 448:	5d e3       	ldi	r21, 0x3D	; 61
 44a:	a4 d4       	rcall	.+2376   	; 0xd94 <__mulsf3>
 44c:	6b 01       	movw	r12, r22
 44e:	7c 01       	movw	r14, r24
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 ec       	ldi	r20, 0xC0	; 192
 456:	5f e3       	ldi	r21, 0x3F	; 63
 458:	c5 01       	movw	r24, r10
 45a:	b4 01       	movw	r22, r8
 45c:	9b d4       	rcall	.+2358   	; 0xd94 <__mulsf3>
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	c7 01       	movw	r24, r14
 464:	b6 01       	movw	r22, r12
 466:	0b d3       	rcall	.+1558   	; 0xa7e <__addsf3>
 468:	d6 d3       	rcall	.+1964   	; 0xc16 <__fixsfsi>
 46a:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <__data_end+0x1>
 46e:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <__data_end>
	cur_control += g_Vcur * 0.0683;
 472:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Vcur>
 476:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Vcur+0x1>
 47a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Vcur+0x2>
 47e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Vcur+0x3>
 482:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <__data_end>
 486:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <__data_end+0x1>
 48a:	2f ed       	ldi	r18, 0xDF	; 223
 48c:	30 ee       	ldi	r19, 0xE0	; 224
 48e:	4b e8       	ldi	r20, 0x8B	; 139
 490:	5d e3       	ldi	r21, 0x3D	; 61
 492:	80 d4       	rcall	.+2304   	; 0xd94 <__mulsf3>
 494:	4b 01       	movw	r8, r22
 496:	5c 01       	movw	r10, r24
 498:	b7 01       	movw	r22, r14
 49a:	ff 0c       	add	r15, r15
 49c:	88 0b       	sbc	r24, r24
 49e:	99 0b       	sbc	r25, r25
 4a0:	ed d3       	rcall	.+2010   	; 0xc7c <__floatsisf>
 4a2:	9b 01       	movw	r18, r22
 4a4:	ac 01       	movw	r20, r24
 4a6:	c5 01       	movw	r24, r10
 4a8:	b4 01       	movw	r22, r8
 4aa:	e9 d2       	rcall	.+1490   	; 0xa7e <__addsf3>
 4ac:	b4 d3       	rcall	.+1896   	; 0xc16 <__fixsfsi>
 4ae:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <__data_end+0x1>
 4b2:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <__data_end>
 4b6:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <g_Cerr>
	
	g_Cerr_sum += g_Cerr;
 4ba:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <g_Cerr+0x1>
 4be:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <g_Cerr+0x2>
 4c2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <g_Cerr+0x3>
 4c6:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <g_Cerr_sum>
 4ca:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <g_Cerr_sum+0x1>
 4ce:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <g_Cerr_sum+0x2>
 4d2:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <g_Cerr_sum+0x3>
 4d6:	d3 d2       	rcall	.+1446   	; 0xa7e <__addsf3>
 4d8:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <g_Cerr_sum>
 4dc:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <g_Cerr_sum+0x1>
 4e0:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_Cerr_sum+0x2>
 4e4:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_Cerr_sum+0x3>
 4e8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
	
	//I-term anti
	if(cur_control > 24){
 4ec:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 4f0:	49 97       	sbiw	r24, 0x19	; 25
 4f2:	8c f1       	brlt	.+98     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
		cur_control = 24;
 4f4:	88 e1       	ldi	r24, 0x18	; 24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 4fc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		g_Cerr_sum -= (cur_control - 24) * 1. / 0.0827 / 3.;
 500:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 504:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x1>
 508:	c0 90 98 02 	lds	r12, 0x0298	; 0x800298 <g_Cerr_sum>
 50c:	d0 90 99 02 	lds	r13, 0x0299	; 0x800299 <g_Cerr_sum+0x1>
 510:	e0 90 9a 02 	lds	r14, 0x029A	; 0x80029a <g_Cerr_sum+0x2>
 514:	f0 90 9b 02 	lds	r15, 0x029B	; 0x80029b <g_Cerr_sum+0x3>
 518:	68 51       	subi	r22, 0x18	; 24
 51a:	71 09       	sbc	r23, r1
 51c:	07 2e       	mov	r0, r23
 51e:	00 0c       	add	r0, r0
 520:	88 0b       	sbc	r24, r24
 522:	99 0b       	sbc	r25, r25
 524:	ab d3       	rcall	.+1878   	; 0xc7c <__floatsisf>
 526:	2e e9       	ldi	r18, 0x9E	; 158
 528:	3e e5       	ldi	r19, 0x5E	; 94
 52a:	49 ea       	ldi	r20, 0xA9	; 169
 52c:	5d e3       	ldi	r21, 0x3D	; 61
 52e:	0b d3       	rcall	.+1558   	; 0xb46 <__divsf3>
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	40 e4       	ldi	r20, 0x40	; 64
 536:	50 e4       	ldi	r21, 0x40	; 64
 538:	06 d3       	rcall	.+1548   	; 0xb46 <__divsf3>
 53a:	9b 01       	movw	r18, r22
 53c:	ac 01       	movw	r20, r24
 53e:	c7 01       	movw	r24, r14
 540:	b6 01       	movw	r22, r12
 542:	9c d2       	rcall	.+1336   	; 0xa7c <__subsf3>
 544:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <g_Cerr_sum>
 548:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <g_Cerr_sum+0x1>
 54c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_Cerr_sum+0x2>
 550:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_Cerr_sum+0x3>
 554:	37 c0       	rjmp	.+110    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 556:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
	}
	else if(cur_control < -24){
 55a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 55e:	88 3e       	cpi	r24, 0xE8	; 232
 560:	9f 4f       	sbci	r25, 0xFF	; 255
		cur_control = -24;
 562:	84 f5       	brge	.+96     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 564:	88 ee       	ldi	r24, 0xE8	; 232
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
		g_Cerr_sum -= (cur_control + 24) * 1. / 0.0827 / 3.;
 56c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 570:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 574:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x1>
 578:	c0 90 98 02 	lds	r12, 0x0298	; 0x800298 <g_Cerr_sum>
 57c:	d0 90 99 02 	lds	r13, 0x0299	; 0x800299 <g_Cerr_sum+0x1>
 580:	e0 90 9a 02 	lds	r14, 0x029A	; 0x80029a <g_Cerr_sum+0x2>
 584:	f0 90 9b 02 	lds	r15, 0x029B	; 0x80029b <g_Cerr_sum+0x3>
 588:	68 5e       	subi	r22, 0xE8	; 232
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	07 2e       	mov	r0, r23
 58e:	00 0c       	add	r0, r0
 590:	88 0b       	sbc	r24, r24
 592:	99 0b       	sbc	r25, r25
 594:	73 d3       	rcall	.+1766   	; 0xc7c <__floatsisf>
 596:	2e e9       	ldi	r18, 0x9E	; 158
 598:	3e e5       	ldi	r19, 0x5E	; 94
 59a:	49 ea       	ldi	r20, 0xA9	; 169
 59c:	5d e3       	ldi	r21, 0x3D	; 61
 59e:	d3 d2       	rcall	.+1446   	; 0xb46 <__divsf3>
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	40 e4       	ldi	r20, 0x40	; 64
 5a6:	50 e4       	ldi	r21, 0x40	; 64
 5a8:	ce d2       	rcall	.+1436   	; 0xb46 <__divsf3>
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	64 d2       	rcall	.+1224   	; 0xa7c <__subsf3>
 5b4:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <g_Cerr_sum>
 5b8:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <g_Cerr_sum+0x1>
 5bc:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_Cerr_sum+0x2>
 5c0:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <g_Cerr_sum+0x3>
	}
	
	SetDutyCW(cur_control);
 5c4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 5c8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x1>
 5cc:	07 2e       	mov	r0, r23
 5ce:	00 0c       	add	r0, r0
 5d0:	88 0b       	sbc	r24, r24
 5d2:	99 0b       	sbc	r25, r25
 5d4:	53 d3       	rcall	.+1702   	; 0xc7c <__floatsisf>
 5d6:	78 dd       	rcall	.-1296   	; 0xc8 <SetDutyCW>
 5d8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_SendFlag>
	
	/////////////////////////////////////////
	
	g_SendFlag++;
 5dc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_SendFlag+0x1>
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_SendFlag+0x1>
 5e6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_SendFlag>
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30

}
 5ee:	cf 91       	pop	r28
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	df 90       	pop	r13
 60a:	cf 90       	pop	r12
 60c:	bf 90       	pop	r11
 60e:	af 90       	pop	r10
 610:	9f 90       	pop	r9
 612:	8f 90       	pop	r8
 614:	0f 90       	pop	r0
 616:	0b be       	out	0x3b, r0	; 59
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <main>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29



int main(void){
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	ac 97       	sbiw	r28, 0x2c	; 44
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
 636:	8e ef       	ldi	r24, 0xFE	; 254
 638:	8c 83       	std	Y+4, r24	; 0x04
 63a:	8b 83       	std	Y+3, r24	; 0x03
 63c:	8a 83       	std	Y+2, r24	; 0x02
 63e:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
 640:	ba d1       	rcall	.+884    	; 0x9b6 <InitIO>
	
	//Uart
	InitUart0();
 642:	00 d2       	rcall	.+1024   	; 0xa44 <InitUart0>
	
	//SPI
	InitSPI();
 644:	08 d2       	rcall	.+1040   	; 0xa56 <InitSPI>
	
	//Timer
	InitTimer0();
 646:	c4 d1       	rcall	.+904    	; 0x9d0 <InitTimer0>
 648:	c8 d1       	rcall	.+912    	; 0x9da <InitTimer1>
	InitTimer1();
 64a:	da d1       	rcall	.+948    	; 0xa00 <InitTimer3>
 64c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
 650:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
 654:	1d bc       	out	0x2d, r1	; 45
 656:	1c bc       	out	0x2c, r1	; 44
 658:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	cb 01       	movw	r24, r22
 65e:	34 dd       	rcall	.-1432   	; 0xc8 <SetDutyCW>
 660:	ec d1       	rcall	.+984    	; 0xa3a <InitADC>
 662:	5e dd       	rcall	.-1348   	; 0x120 <InitLS7366>
	
	//ADC
	InitADC();
 664:	83 e8       	ldi	r24, 0x83	; 131
 666:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
 668:	78 94       	sei
 66a:	b1 2c       	mov	r11, r1
	
	//TCNT3 = 65536 - 125;
	TCNT0 = 256 - 125;
 66c:	0f 2e       	mov	r0, r31
 66e:	fc e2       	ldi	r31, 0x2C	; 44
	sei();
 670:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
 672:	f0 2d       	mov	r31, r0
			//AVR -> ODE
			g_SendFlag = 0;			
			
				
			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
 674:	0f 2e       	mov	r0, r31
 676:	f3 e0       	ldi	r31, 0x03	; 3
 678:	af 2e       	mov	r10, r31
 67a:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
 67c:	7e 01       	movw	r14, r28
 67e:	8d e2       	ldi	r24, 0x2D	; 45
 680:	e8 0e       	add	r14, r24
 682:	f1 1c       	adc	r15, r1
 684:	0f 2e       	mov	r0, r31
 686:	fa e4       	ldi	r31, 0x4A	; 74
 688:	cf 2e       	mov	r12, r31
 68a:	f2 e0       	ldi	r31, 0x02	; 2
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				
				if (checkSize == 8) {
					if(g_PacketBuffer.data.id == g_ID){
 68c:	df 2e       	mov	r13, r31
 68e:	f0 2d       	mov	r31, r0
 690:	68 94       	set
 692:	77 24       	eor	r7, r7
 694:	71 f8       	bld	r7, 1
 696:	88 24       	eor	r8, r8

						g_PacketMode = 2;
 698:	83 94       	inc	r8
 69a:	2d c1       	rjmp	.+602    	; 0x8f6 <main+0x2d4>
 69c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <g_PacketMode>
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
					checkSize++;
					if (checkSize == 4) {
						g_PacketMode = 1;
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	e1 f0       	breq	.+56     	; 0x6dc <main+0xba>
	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
			
			switch(g_PacketMode){
 6a4:	18 f0       	brcs	.+6      	; 0x6ac <main+0x8a>
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	e1 f1       	breq	.+120    	; 0x722 <main+0x100>
 6aa:	20 c1       	rjmp	.+576    	; 0x8ec <main+0x2ca>
 6ac:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <g_BufReadCnt>
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	ee 5c       	subi	r30, 0xCE	; 206
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	80 81       	ld	r24, Z
 6b8:	8f 3f       	cpi	r24, 0xFF	; 255
 6ba:	69 f4       	brne	.+26     	; 0x6d6 <main+0xb4>
 6bc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
 6c2:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
					checkSize++;
 6c6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
 6ca:	84 30       	cpi	r24, 0x04	; 4
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0xae>
					if (checkSize == 4) {
 6ce:	0e c1       	rjmp	.+540    	; 0x8ec <main+0x2ca>
 6d0:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <g_PacketMode>
 6d4:	0b c1       	rjmp	.+534    	; 0x8ec <main+0x2ca>
 6d6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
						g_PacketMode = 1;
 6da:	08 c1       	rjmp	.+528    	; 0x8ec <main+0x2ca>
 6dc:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <checkSize>
					}
				}
				else {
					checkSize = 0;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	8e 0f       	add	r24, r30
				}
				break;
				
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
 6e4:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <g_BufReadCnt>
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
 6f0:	ae 5c       	subi	r26, 0xCE	; 206
 6f2:	be 4f       	sbci	r27, 0xFE	; 254
 6f4:	8c 91       	ld	r24, X
 6f6:	e6 5b       	subi	r30, 0xB6	; 182
 6f8:	fd 4f       	sbci	r31, 0xFD	; 253
 6fa:	80 83       	st	Z, r24
 6fc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
 700:	88 30       	cpi	r24, 0x08	; 8
 702:	09 f0       	breq	.+2      	; 0x706 <main+0xe4>
				
				if (checkSize == 8) {
 704:	f3 c0       	rjmp	.+486    	; 0x8ec <main+0x2ca>
 706:	f6 01       	movw	r30, r12
 708:	95 81       	ldd	r25, Z+5	; 0x05
 70a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
					if(g_PacketBuffer.data.id == g_ID){
 70e:	98 13       	cpse	r25, r24
 710:	03 c0       	rjmp	.+6      	; 0x718 <main+0xf6>
 712:	70 92 9c 02 	sts	0x029C, r7	; 0x80029c <g_PacketMode>
 716:	ea c0       	rjmp	.+468    	; 0x8ec <main+0x2ca>
 718:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_PacketMode>

						g_PacketMode = 2;
 71c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
					}
					else{
						g_PacketMode = 0;
 720:	e5 c0       	rjmp	.+458    	; 0x8ec <main+0x2ca>
 722:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <checkSize>
						checkSize = 0;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	8e 0f       	add	r24, r30

				break;
			
			case 2:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
 72a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <checkSize>
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <g_BufReadCnt>
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	ae 5c       	subi	r26, 0xCE	; 206
 738:	be 4f       	sbci	r27, 0xFE	; 254
 73a:	8c 91       	ld	r24, X
 73c:	e6 5b       	subi	r30, 0xB6	; 182
 73e:	fd 4f       	sbci	r31, 0xFD	; 253
 740:	80 83       	st	Z, r24
 742:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <g_BufReadCnt>
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ee 5c       	subi	r30, 0xCE	; 206
				check += g_buf[g_BufReadCnt];
 74a:	fe 4f       	sbci	r31, 0xFE	; 254
 74c:	80 81       	ld	r24, Z
 74e:	b8 0e       	add	r11, r24
 750:	f6 01       	movw	r30, r12
 752:	94 81       	ldd	r25, Z+4	; 0x04
 754:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) {
 758:	98 13       	cpse	r25, r24
 75a:	b7 c0       	rjmp	.+366    	; 0x8ca <main+0x2a8>
 75c:	87 81       	ldd	r24, Z+7	; 0x07
 75e:	b8 12       	cpse	r11, r24
 760:	ae c0       	rjmp	.+348    	; 0x8be <main+0x29c>
 762:	86 81       	ldd	r24, Z+6	; 0x06

					if(check == g_PacketBuffer.data.check){
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	09 f0       	breq	.+2      	; 0x76a <main+0x148>

						switch(g_PacketBuffer.data.mode){
 768:	aa c0       	rjmp	.+340    	; 0x8be <main+0x29c>
 76a:	60 85       	ldd	r22, Z+8	; 0x08
 76c:	71 85       	ldd	r23, Z+9	; 0x09
 76e:	82 85       	ldd	r24, Z+10	; 0x0a

							case 2:
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
 770:	93 85       	ldd	r25, Z+11	; 0x0b
 772:	84 d2       	rcall	.+1288   	; 0xc7c <__floatsisf>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	4a e7       	ldi	r20, 0x7A	; 122
 77a:	54 e4       	ldi	r21, 0x44	; 68
 77c:	e4 d1       	rcall	.+968    	; 0xb46 <__divsf3>
 77e:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_Pdes>
 782:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_Pdes+0x1>
 786:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_Pdes+0x2>
 78a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_Pdes+0x3>
 78e:	f6 01       	movw	r30, r12
 790:	64 85       	ldd	r22, Z+12	; 0x0c
 792:	75 85       	ldd	r23, Z+13	; 0x0d
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
 794:	86 85       	ldd	r24, Z+14	; 0x0e
 796:	97 85       	ldd	r25, Z+15	; 0x0f
 798:	71 d2       	rcall	.+1250   	; 0xc7c <__floatsisf>
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	4a e7       	ldi	r20, 0x7A	; 122
 7a0:	54 e4       	ldi	r21, 0x44	; 68
 7a2:	d1 d1       	rcall	.+930    	; 0xb46 <__divsf3>
 7a4:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <g_Vlimit>
 7a8:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <g_Vlimit+0x1>
 7ac:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_Vlimit+0x2>
 7b0:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_Vlimit+0x3>
 7b4:	f6 01       	movw	r30, r12
 7b6:	60 89       	ldd	r22, Z+16	; 0x10
 7b8:	71 89       	ldd	r23, Z+17	; 0x11
							g_Climit = g_PacketBuffer.data.cur / 1000.;
 7ba:	82 89       	ldd	r24, Z+18	; 0x12
 7bc:	93 89       	ldd	r25, Z+19	; 0x13
 7be:	5e d2       	rcall	.+1212   	; 0xc7c <__floatsisf>
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	4a e7       	ldi	r20, 0x7A	; 122
 7c6:	54 e4       	ldi	r21, 0x44	; 68
 7c8:	be d1       	rcall	.+892    	; 0xb46 <__divsf3>
 7ca:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_Climit>
 7ce:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_Climit+0x1>
 7d2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_Climit+0x2>
 7d6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_Climit+0x3>
 7da:	f6 01       	movw	r30, r12
 7dc:	64 89       	ldd	r22, Z+20	; 0x14
 7de:	75 89       	ldd	r23, Z+21	; 0x15
							
							//get control values(ODE->AVR)
							Kp_cur = g_PacketBuffer.data.Kp_cur / 1000.;
 7e0:	86 89       	ldd	r24, Z+22	; 0x16
 7e2:	97 89       	ldd	r25, Z+23	; 0x17
 7e4:	4b d2       	rcall	.+1174   	; 0xc7c <__floatsisf>
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	4a e7       	ldi	r20, 0x7A	; 122
 7ec:	54 e4       	ldi	r21, 0x44	; 68
 7ee:	ab d1       	rcall	.+854    	; 0xb46 <__divsf3>
 7f0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <Kp_cur>
 7f4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <Kp_cur+0x1>
 7f8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Kp_cur+0x2>
 7fc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Kp_cur+0x3>
 800:	f6 01       	movw	r30, r12
 802:	60 8d       	ldd	r22, Z+24	; 0x18
 804:	71 8d       	ldd	r23, Z+25	; 0x19
							Ki_cur = g_PacketBuffer.data.Ki_cur / 1000.;
 806:	82 8d       	ldd	r24, Z+26	; 0x1a
 808:	93 8d       	ldd	r25, Z+27	; 0x1b
 80a:	38 d2       	rcall	.+1136   	; 0xc7c <__floatsisf>
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	4a e7       	ldi	r20, 0x7A	; 122
 812:	54 e4       	ldi	r21, 0x44	; 68
 814:	98 d1       	rcall	.+816    	; 0xb46 <__divsf3>
 816:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <Ki_cur>
 81a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <Ki_cur+0x1>
 81e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Ki_cur+0x2>
 822:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Ki_cur+0x3>
 826:	f6 01       	movw	r30, r12
 828:	64 8d       	ldd	r22, Z+28	; 0x1c
 82a:	75 8d       	ldd	r23, Z+29	; 0x1d
							Kp_vel = g_PacketBuffer.data.Kp_vel / 1000.;
 82c:	86 8d       	ldd	r24, Z+30	; 0x1e
 82e:	97 8d       	ldd	r25, Z+31	; 0x1f
 830:	25 d2       	rcall	.+1098   	; 0xc7c <__floatsisf>
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	4a e7       	ldi	r20, 0x7A	; 122
 838:	54 e4       	ldi	r21, 0x44	; 68
 83a:	85 d1       	rcall	.+778    	; 0xb46 <__divsf3>
 83c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Kp_vel>
 840:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Kp_vel+0x1>
 844:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Kp_vel+0x2>
 848:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Kp_vel+0x3>
 84c:	f6 01       	movw	r30, r12
 84e:	60 a1       	ldd	r22, Z+32	; 0x20
 850:	71 a1       	ldd	r23, Z+33	; 0x21
							Ki_vel = g_PacketBuffer.data.Ki_vel / 1000.;
 852:	82 a1       	ldd	r24, Z+34	; 0x22
 854:	93 a1       	ldd	r25, Z+35	; 0x23
 856:	12 d2       	rcall	.+1060   	; 0xc7c <__floatsisf>
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	4a e7       	ldi	r20, 0x7A	; 122
 85e:	54 e4       	ldi	r21, 0x44	; 68
 860:	72 d1       	rcall	.+740    	; 0xb46 <__divsf3>
 862:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Ki_vel>
 866:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Ki_vel+0x1>
 86a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Ki_vel+0x2>
 86e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Ki_vel+0x3>
 872:	f6 01       	movw	r30, r12
 874:	64 a1       	ldd	r22, Z+36	; 0x24
 876:	75 a1       	ldd	r23, Z+37	; 0x25
							Kp_pos = g_PacketBuffer.data.Kp_pos / 1000.;
 878:	86 a1       	ldd	r24, Z+38	; 0x26
 87a:	97 a1       	ldd	r25, Z+39	; 0x27
 87c:	ff d1       	rcall	.+1022   	; 0xc7c <__floatsisf>
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	4a e7       	ldi	r20, 0x7A	; 122
 884:	54 e4       	ldi	r21, 0x44	; 68
 886:	5f d1       	rcall	.+702    	; 0xb46 <__divsf3>
 888:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Kp_pos>
 88c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Kp_pos+0x1>
 890:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Kp_pos+0x2>
 894:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Kp_pos+0x3>
 898:	f6 01       	movw	r30, r12
 89a:	60 a5       	ldd	r22, Z+40	; 0x28
 89c:	71 a5       	ldd	r23, Z+41	; 0x29
							Kd_pos = g_PacketBuffer.data.Kd_pos / 1000.;							
 89e:	82 a5       	ldd	r24, Z+42	; 0x2a
 8a0:	93 a5       	ldd	r25, Z+43	; 0x2b
 8a2:	ec d1       	rcall	.+984    	; 0xc7c <__floatsisf>
 8a4:	20 e0       	ldi	r18, 0x00	; 0
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	4a e7       	ldi	r20, 0x7A	; 122
 8aa:	54 e4       	ldi	r21, 0x44	; 68
 8ac:	4c d1       	rcall	.+664    	; 0xb46 <__divsf3>
 8ae:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 8b2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 8ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 8be:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_PacketMode>
 8c2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
							break;
							}
					}
					
					check = 0;
					g_PacketMode = 0;
 8c6:	b1 2c       	mov	r11, r1
 8c8:	11 c0       	rjmp	.+34     	; 0x8ec <main+0x2ca>
					checkSize = 0;
 8ca:	f6 01       	movw	r30, r12
 8cc:	94 81       	ldd	r25, Z+4	; 0x04
							Kd_pos = g_PacketBuffer.data.Kd_pos / 1000.;							
							break;
							}
					}
					
					check = 0;
 8ce:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
					g_PacketMode = 0;
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
 8d2:	98 17       	cp	r25, r24
 8d4:	20 f0       	brcs	.+8      	; 0x8de <main+0x2bc>
 8d6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <checkSize>
 8da:	8d 32       	cpi	r24, 0x2D	; 45
 8dc:	38 f0       	brcs	.+14     	; 0x8ec <main+0x2ca>
 8de:	86 e6       	ldi	r24, 0x66	; 102
 8e0:	bf d0       	rcall	.+382    	; 0xa60 <TransUart0>
 8e2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <g_PacketMode>
					TransUart0('f');
 8e6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <checkSize>
 8ea:	b1 2c       	mov	r11, r1
					check = 0;
					g_PacketMode = 0;
 8ec:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <g_BufReadCnt>
					checkSize = 0;
 8f0:	8f 5f       	subi	r24, 0xFF	; 255
 8f2:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <g_BufReadCnt>
	sei();

	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
 8f6:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_BufReadCnt>
 8fa:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_BufWriteCnt>
 8fe:	98 13       	cpse	r25, r24
 900:	cd ce       	rjmp	.-614    	; 0x69c <main+0x7a>
 902:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_SendFlag>
 906:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_SendFlag+0x1>
 90a:	44 97       	sbiw	r24, 0x14	; 20
					checkSize = 0;
				}
			}
		}

		if(g_SendFlag > 19){
 90c:	a4 f3       	brlt	.-24     	; 0x8f6 <main+0x2d4>
 90e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <g_SendFlag+0x1>
 912:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <g_SendFlag>
			//AVR -> ODE
			g_SendFlag = 0;			
 916:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
 91a:	8e 83       	std	Y+6, r24	; 0x06
			
				
			packet.data.id = g_ID;
 91c:	9d 82       	std	Y+5, r9	; 0x05
 91e:	af 82       	std	Y+7, r10	; 0x07
 920:	18 86       	std	Y+8, r1	; 0x08
			packet.data.size = sizeof(Packet_data_t);
 922:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <g_Pdes>
			packet.data.mode = 3;
			packet.data.check = 0;
 926:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <g_Pdes+0x1>
			
			//현재 모터 값으로 수정을 해야한다.
			packet.data.pos = g_Pdes * 1000;    
 92a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_Pdes+0x2>
 92e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_Pdes+0x3>
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	4a e7       	ldi	r20, 0x7A	; 122
 938:	54 e4       	ldi	r21, 0x44	; 68
 93a:	2c d2       	rcall	.+1112   	; 0xd94 <__mulsf3>
 93c:	6c d1       	rcall	.+728    	; 0xc16 <__fixsfsi>
 93e:	69 87       	std	Y+9, r22	; 0x09
 940:	7a 87       	std	Y+10, r23	; 0x0a
 942:	8b 87       	std	Y+11, r24	; 0x0b
 944:	9c 87       	std	Y+12, r25	; 0x0c
 946:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_Vlimit>
 94a:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <g_Vlimit+0x1>
			packet.data.velo = g_Vlimit * 1000; 
 94e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_Vlimit+0x2>
 952:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_Vlimit+0x3>
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	4a e7       	ldi	r20, 0x7A	; 122
 95c:	54 e4       	ldi	r21, 0x44	; 68
 95e:	1a d2       	rcall	.+1076   	; 0xd94 <__mulsf3>
 960:	5a d1       	rcall	.+692    	; 0xc16 <__fixsfsi>
 962:	6d 87       	std	Y+13, r22	; 0x0d
 964:	7e 87       	std	Y+14, r23	; 0x0e
 966:	8f 87       	std	Y+15, r24	; 0x0f
 968:	98 8b       	std	Y+16, r25	; 0x10
 96a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_Climit>
 96e:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <g_Climit+0x1>
			packet.data.cur = g_Climit * 1000;  
 972:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_Climit+0x2>
 976:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_Climit+0x3>
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	4a e7       	ldi	r20, 0x7A	; 122
 980:	54 e4       	ldi	r21, 0x44	; 68
 982:	08 d2       	rcall	.+1040   	; 0xd94 <__mulsf3>
 984:	48 d1       	rcall	.+656    	; 0xc16 <__fixsfsi>
 986:	69 8b       	std	Y+17, r22	; 0x11
 988:	7a 8b       	std	Y+18, r23	; 0x12
 98a:	8b 8b       	std	Y+19, r24	; 0x13
 98c:	9c 8b       	std	Y+20, r25	; 0x14
 98e:	fe 01       	movw	r30, r28
 990:	39 96       	adiw	r30, 0x09	; 9
 992:	81 91       	ld	r24, Z+
 994:	98 85       	ldd	r25, Y+8	; 0x08
 996:	89 0f       	add	r24, r25
 998:	88 87       	std	Y+8, r24	; 0x08
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
 99a:	ee 15       	cp	r30, r14
 99c:	ff 05       	cpc	r31, r15
 99e:	c9 f7       	brne	.-14     	; 0x992 <main+0x370>
 9a0:	8e 01       	movw	r16, r28
			//현재 모터 값으로 수정을 해야한다.
			packet.data.pos = g_Pdes * 1000;    
			packet.data.velo = g_Vlimit * 1000; 
			packet.data.cur = g_Climit * 1000;  
			
			for (int i = 8; i < sizeof(Packet_t); i++)
 9a2:	0f 5f       	subi	r16, 0xFF	; 255
 9a4:	1f 4f       	sbci	r17, 0xFF	; 255
 9a6:	f8 01       	movw	r30, r16
 9a8:	81 91       	ld	r24, Z+
 9aa:	8f 01       	movw	r16, r30
 9ac:	59 d0       	rcall	.+178    	; 0xa60 <TransUart0>
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
				TransUart0(packet.buffer[i]);
 9ae:	0e 15       	cp	r16, r14
 9b0:	1f 05       	cpc	r17, r15
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <main+0x384>
 9b4:	a0 cf       	rjmp	.-192    	; 0x8f6 <main+0x2d4>

000009b6 <InitIO>:
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
			packet.data.cur = g_Climit * 1000;  
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
 9b8:	8a bb       	out	0x1a, r24	; 26
 9ba:	84 bb       	out	0x14, r24	; 20
 9bc:	88 e0       	ldi	r24, 0x08	; 8
 9be:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
 9c0:	87 e6       	ldi	r24, 0x67	; 103
 9c2:	87 bb       	out	0x17, r24	; 23
 9c4:	8a e1       	ldi	r24, 0x1A	; 26
 9c6:	82 b9       	out	0x02, r24	; 2
 9c8:	1b ba       	out	0x1b, r1	; 27
 9ca:	87 e0       	ldi	r24, 0x07	; 7
 9cc:	88 bb       	out	0x18, r24	; 24
 9ce:	08 95       	ret

000009d0 <InitTimer0>:
 9d0:	84 e0       	ldi	r24, 0x04	; 4
 9d2:	83 bf       	out	0x33, r24	; 51
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	87 bf       	out	0x37, r24	; 55
 9d8:	08 95       	ret

000009da <InitTimer1>:
 9da:	82 ee       	ldi	r24, 0xE2	; 226
 9dc:	8f bd       	out	0x2f, r24	; 47
 9de:	81 e1       	ldi	r24, 0x11	; 17
 9e0:	8e bd       	out	0x2e, r24	; 46
 9e2:	8f e8       	ldi	r24, 0x8F	; 143
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	97 bd       	out	0x27, r25	; 39
 9e8:	86 bd       	out	0x26, r24	; 38
 9ea:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 9ee:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 9f2:	1b bc       	out	0x2b, r1	; 43
 9f4:	1a bc       	out	0x2a, r1	; 42
 9f6:	19 bc       	out	0x29, r1	; 41
 9f8:	18 bc       	out	0x28, r1	; 40
 9fa:	1d bc       	out	0x2d, r1	; 45
 9fc:	1c bc       	out	0x2c, r1	; 44
 9fe:	08 95       	ret

00000a00 <InitTimer3>:
 a00:	82 eb       	ldi	r24, 0xB2	; 178
 a02:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 a06:	81 e1       	ldi	r24, 0x11	; 17
 a08:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 a0c:	8f e8       	ldi	r24, 0x8F	; 143
 a0e:	91 e0       	ldi	r25, 0x01	; 1
 a10:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 a14:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a18:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 a1c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 a20:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 a24:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 a28:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 a2c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 a30:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 a34:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 a38:	08 95       	ret

00000a3a <InitADC>:
 a3a:	80 e4       	ldi	r24, 0x40	; 64
 a3c:	87 b9       	out	0x07, r24	; 7
 a3e:	86 e8       	ldi	r24, 0x86	; 134
 a40:	86 b9       	out	0x06, r24	; 6
 a42:	08 95       	ret

00000a44 <InitUart0>:
 a44:	1b b8       	out	0x0b, r1	; 11
 a46:	88 e9       	ldi	r24, 0x98	; 152
 a48:	8a b9       	out	0x0a, r24	; 10
 a4a:	86 e0       	ldi	r24, 0x06	; 6
 a4c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 a50:	87 e6       	ldi	r24, 0x67	; 103
 a52:	89 b9       	out	0x09, r24	; 9
 a54:	08 95       	ret

00000a56 <InitSPI>:
 a56:	80 e5       	ldi	r24, 0x50	; 80
 a58:	8d b9       	out	0x0d, r24	; 13
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	8e b9       	out	0x0e, r24	; 14
 a5e:	08 95       	ret

00000a60 <TransUart0>:
 a60:	5d 9b       	sbis	0x0b, 5	; 11
 a62:	fe cf       	rjmp	.-4      	; 0xa60 <TransUart0>
 a64:	8c b9       	out	0x0c, r24	; 12
 a66:	08 95       	ret

00000a68 <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
 a68:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
 a6a:	77 9b       	sbis	0x0e, 7	; 14
 a6c:	fe cf       	rjmp	.-4      	; 0xa6a <SPI_MasterSend+0x2>
	data = SPDR;
 a6e:	8f b1       	in	r24, 0x0f	; 15
 a70:	08 95       	ret

00000a72 <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
 a72:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
 a74:	77 9b       	sbis	0x0e, 7	; 14
 a76:	fe cf       	rjmp	.-4      	; 0xa74 <SPI_MasterRecv+0x2>
	return SPDR;
 a78:	8f b1       	in	r24, 0x0f	; 15
 a7a:	08 95       	ret

00000a7c <__subsf3>:
 a7c:	50 58       	subi	r21, 0x80	; 128

00000a7e <__addsf3>:
 a7e:	bb 27       	eor	r27, r27
 a80:	aa 27       	eor	r26, r26
 a82:	0e d0       	rcall	.+28     	; 0xaa0 <__addsf3x>
 a84:	4d c1       	rjmp	.+666    	; 0xd20 <__fp_round>
 a86:	3e d1       	rcall	.+636    	; 0xd04 <__fp_pscA>
 a88:	30 f0       	brcs	.+12     	; 0xa96 <__addsf3+0x18>
 a8a:	43 d1       	rcall	.+646    	; 0xd12 <__fp_pscB>
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__addsf3+0x18>
 a8e:	31 f4       	brne	.+12     	; 0xa9c <__addsf3+0x1e>
 a90:	9f 3f       	cpi	r25, 0xFF	; 255
 a92:	11 f4       	brne	.+4      	; 0xa98 <__addsf3+0x1a>
 a94:	1e f4       	brtc	.+6      	; 0xa9c <__addsf3+0x1e>
 a96:	33 c1       	rjmp	.+614    	; 0xcfe <__fp_nan>
 a98:	0e f4       	brtc	.+2      	; 0xa9c <__addsf3+0x1e>
 a9a:	e0 95       	com	r30
 a9c:	e7 fb       	bst	r30, 7
 a9e:	29 c1       	rjmp	.+594    	; 0xcf2 <__fp_inf>

00000aa0 <__addsf3x>:
 aa0:	e9 2f       	mov	r30, r25
 aa2:	4f d1       	rcall	.+670    	; 0xd42 <__fp_split3>
 aa4:	80 f3       	brcs	.-32     	; 0xa86 <__addsf3+0x8>
 aa6:	ba 17       	cp	r27, r26
 aa8:	62 07       	cpc	r22, r18
 aaa:	73 07       	cpc	r23, r19
 aac:	84 07       	cpc	r24, r20
 aae:	95 07       	cpc	r25, r21
 ab0:	18 f0       	brcs	.+6      	; 0xab8 <__addsf3x+0x18>
 ab2:	71 f4       	brne	.+28     	; 0xad0 <__addsf3x+0x30>
 ab4:	9e f5       	brtc	.+102    	; 0xb1c <__addsf3x+0x7c>
 ab6:	67 c1       	rjmp	.+718    	; 0xd86 <__fp_zero>
 ab8:	0e f4       	brtc	.+2      	; 0xabc <__addsf3x+0x1c>
 aba:	e0 95       	com	r30
 abc:	0b 2e       	mov	r0, r27
 abe:	ba 2f       	mov	r27, r26
 ac0:	a0 2d       	mov	r26, r0
 ac2:	0b 01       	movw	r0, r22
 ac4:	b9 01       	movw	r22, r18
 ac6:	90 01       	movw	r18, r0
 ac8:	0c 01       	movw	r0, r24
 aca:	ca 01       	movw	r24, r20
 acc:	a0 01       	movw	r20, r0
 ace:	11 24       	eor	r1, r1
 ad0:	ff 27       	eor	r31, r31
 ad2:	59 1b       	sub	r21, r25
 ad4:	99 f0       	breq	.+38     	; 0xafc <__addsf3x+0x5c>
 ad6:	59 3f       	cpi	r21, 0xF9	; 249
 ad8:	50 f4       	brcc	.+20     	; 0xaee <__addsf3x+0x4e>
 ada:	50 3e       	cpi	r21, 0xE0	; 224
 adc:	68 f1       	brcs	.+90     	; 0xb38 <__addsf3x+0x98>
 ade:	1a 16       	cp	r1, r26
 ae0:	f0 40       	sbci	r31, 0x00	; 0
 ae2:	a2 2f       	mov	r26, r18
 ae4:	23 2f       	mov	r18, r19
 ae6:	34 2f       	mov	r19, r20
 ae8:	44 27       	eor	r20, r20
 aea:	58 5f       	subi	r21, 0xF8	; 248
 aec:	f3 cf       	rjmp	.-26     	; 0xad4 <__addsf3x+0x34>
 aee:	46 95       	lsr	r20
 af0:	37 95       	ror	r19
 af2:	27 95       	ror	r18
 af4:	a7 95       	ror	r26
 af6:	f0 40       	sbci	r31, 0x00	; 0
 af8:	53 95       	inc	r21
 afa:	c9 f7       	brne	.-14     	; 0xaee <__addsf3x+0x4e>
 afc:	7e f4       	brtc	.+30     	; 0xb1c <__addsf3x+0x7c>
 afe:	1f 16       	cp	r1, r31
 b00:	ba 0b       	sbc	r27, r26
 b02:	62 0b       	sbc	r22, r18
 b04:	73 0b       	sbc	r23, r19
 b06:	84 0b       	sbc	r24, r20
 b08:	ba f0       	brmi	.+46     	; 0xb38 <__addsf3x+0x98>
 b0a:	91 50       	subi	r25, 0x01	; 1
 b0c:	a1 f0       	breq	.+40     	; 0xb36 <__addsf3x+0x96>
 b0e:	ff 0f       	add	r31, r31
 b10:	bb 1f       	adc	r27, r27
 b12:	66 1f       	adc	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	c2 f7       	brpl	.-16     	; 0xb0a <__addsf3x+0x6a>
 b1a:	0e c0       	rjmp	.+28     	; 0xb38 <__addsf3x+0x98>
 b1c:	ba 0f       	add	r27, r26
 b1e:	62 1f       	adc	r22, r18
 b20:	73 1f       	adc	r23, r19
 b22:	84 1f       	adc	r24, r20
 b24:	48 f4       	brcc	.+18     	; 0xb38 <__addsf3x+0x98>
 b26:	87 95       	ror	r24
 b28:	77 95       	ror	r23
 b2a:	67 95       	ror	r22
 b2c:	b7 95       	ror	r27
 b2e:	f7 95       	ror	r31
 b30:	9e 3f       	cpi	r25, 0xFE	; 254
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__addsf3x+0x96>
 b34:	b3 cf       	rjmp	.-154    	; 0xa9c <__addsf3+0x1e>
 b36:	93 95       	inc	r25
 b38:	88 0f       	add	r24, r24
 b3a:	08 f0       	brcs	.+2      	; 0xb3e <__addsf3x+0x9e>
 b3c:	99 27       	eor	r25, r25
 b3e:	ee 0f       	add	r30, r30
 b40:	97 95       	ror	r25
 b42:	87 95       	ror	r24
 b44:	08 95       	ret

00000b46 <__divsf3>:
 b46:	0c d0       	rcall	.+24     	; 0xb60 <__divsf3x>
 b48:	eb c0       	rjmp	.+470    	; 0xd20 <__fp_round>
 b4a:	e3 d0       	rcall	.+454    	; 0xd12 <__fp_pscB>
 b4c:	40 f0       	brcs	.+16     	; 0xb5e <__divsf3+0x18>
 b4e:	da d0       	rcall	.+436    	; 0xd04 <__fp_pscA>
 b50:	30 f0       	brcs	.+12     	; 0xb5e <__divsf3+0x18>
 b52:	21 f4       	brne	.+8      	; 0xb5c <__divsf3+0x16>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	19 f0       	breq	.+6      	; 0xb5e <__divsf3+0x18>
 b58:	cc c0       	rjmp	.+408    	; 0xcf2 <__fp_inf>
 b5a:	51 11       	cpse	r21, r1
 b5c:	15 c1       	rjmp	.+554    	; 0xd88 <__fp_szero>
 b5e:	cf c0       	rjmp	.+414    	; 0xcfe <__fp_nan>

00000b60 <__divsf3x>:
 b60:	f0 d0       	rcall	.+480    	; 0xd42 <__fp_split3>
 b62:	98 f3       	brcs	.-26     	; 0xb4a <__divsf3+0x4>

00000b64 <__divsf3_pse>:
 b64:	99 23       	and	r25, r25
 b66:	c9 f3       	breq	.-14     	; 0xb5a <__divsf3+0x14>
 b68:	55 23       	and	r21, r21
 b6a:	b1 f3       	breq	.-20     	; 0xb58 <__divsf3+0x12>
 b6c:	95 1b       	sub	r25, r21
 b6e:	55 0b       	sbc	r21, r21
 b70:	bb 27       	eor	r27, r27
 b72:	aa 27       	eor	r26, r26
 b74:	62 17       	cp	r22, r18
 b76:	73 07       	cpc	r23, r19
 b78:	84 07       	cpc	r24, r20
 b7a:	38 f0       	brcs	.+14     	; 0xb8a <__divsf3_pse+0x26>
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	5f 4f       	sbci	r21, 0xFF	; 255
 b80:	22 0f       	add	r18, r18
 b82:	33 1f       	adc	r19, r19
 b84:	44 1f       	adc	r20, r20
 b86:	aa 1f       	adc	r26, r26
 b88:	a9 f3       	breq	.-22     	; 0xb74 <__divsf3_pse+0x10>
 b8a:	33 d0       	rcall	.+102    	; 0xbf2 <__divsf3_pse+0x8e>
 b8c:	0e 2e       	mov	r0, r30
 b8e:	3a f0       	brmi	.+14     	; 0xb9e <__divsf3_pse+0x3a>
 b90:	e0 e8       	ldi	r30, 0x80	; 128
 b92:	30 d0       	rcall	.+96     	; 0xbf4 <__divsf3_pse+0x90>
 b94:	91 50       	subi	r25, 0x01	; 1
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	e6 95       	lsr	r30
 b9a:	00 1c       	adc	r0, r0
 b9c:	ca f7       	brpl	.-14     	; 0xb90 <__divsf3_pse+0x2c>
 b9e:	29 d0       	rcall	.+82     	; 0xbf2 <__divsf3_pse+0x8e>
 ba0:	fe 2f       	mov	r31, r30
 ba2:	27 d0       	rcall	.+78     	; 0xbf2 <__divsf3_pse+0x8e>
 ba4:	66 0f       	add	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	bb 1f       	adc	r27, r27
 bac:	26 17       	cp	r18, r22
 bae:	37 07       	cpc	r19, r23
 bb0:	48 07       	cpc	r20, r24
 bb2:	ab 07       	cpc	r26, r27
 bb4:	b0 e8       	ldi	r27, 0x80	; 128
 bb6:	09 f0       	breq	.+2      	; 0xbba <__divsf3_pse+0x56>
 bb8:	bb 0b       	sbc	r27, r27
 bba:	80 2d       	mov	r24, r0
 bbc:	bf 01       	movw	r22, r30
 bbe:	ff 27       	eor	r31, r31
 bc0:	93 58       	subi	r25, 0x83	; 131
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255
 bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__divsf3_pse+0x6c>
 bc6:	9e 3f       	cpi	r25, 0xFE	; 254
 bc8:	51 05       	cpc	r21, r1
 bca:	68 f0       	brcs	.+26     	; 0xbe6 <__divsf3_pse+0x82>
 bcc:	92 c0       	rjmp	.+292    	; 0xcf2 <__fp_inf>
 bce:	dc c0       	rjmp	.+440    	; 0xd88 <__fp_szero>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	ec f3       	brlt	.-6      	; 0xbce <__divsf3_pse+0x6a>
 bd4:	98 3e       	cpi	r25, 0xE8	; 232
 bd6:	dc f3       	brlt	.-10     	; 0xbce <__divsf3_pse+0x6a>
 bd8:	86 95       	lsr	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f7 95       	ror	r31
 be2:	9f 5f       	subi	r25, 0xFF	; 255
 be4:	c9 f7       	brne	.-14     	; 0xbd8 <__divsf3_pse+0x74>
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret
 bf2:	e1 e0       	ldi	r30, 0x01	; 1
 bf4:	66 0f       	add	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	bb 1f       	adc	r27, r27
 bfc:	62 17       	cp	r22, r18
 bfe:	73 07       	cpc	r23, r19
 c00:	84 07       	cpc	r24, r20
 c02:	ba 07       	cpc	r27, r26
 c04:	20 f0       	brcs	.+8      	; 0xc0e <__divsf3_pse+0xaa>
 c06:	62 1b       	sub	r22, r18
 c08:	73 0b       	sbc	r23, r19
 c0a:	84 0b       	sbc	r24, r20
 c0c:	ba 0b       	sbc	r27, r26
 c0e:	ee 1f       	adc	r30, r30
 c10:	88 f7       	brcc	.-30     	; 0xbf4 <__divsf3_pse+0x90>
 c12:	e0 95       	com	r30
 c14:	08 95       	ret

00000c16 <__fixsfsi>:
 c16:	04 d0       	rcall	.+8      	; 0xc20 <__fixunssfsi>
 c18:	68 94       	set
 c1a:	b1 11       	cpse	r27, r1
 c1c:	b5 c0       	rjmp	.+362    	; 0xd88 <__fp_szero>
 c1e:	08 95       	ret

00000c20 <__fixunssfsi>:
 c20:	98 d0       	rcall	.+304    	; 0xd52 <__fp_splitA>
 c22:	88 f0       	brcs	.+34     	; 0xc46 <__fixunssfsi+0x26>
 c24:	9f 57       	subi	r25, 0x7F	; 127
 c26:	90 f0       	brcs	.+36     	; 0xc4c <__fixunssfsi+0x2c>
 c28:	b9 2f       	mov	r27, r25
 c2a:	99 27       	eor	r25, r25
 c2c:	b7 51       	subi	r27, 0x17	; 23
 c2e:	a0 f0       	brcs	.+40     	; 0xc58 <__fixunssfsi+0x38>
 c30:	d1 f0       	breq	.+52     	; 0xc66 <__fixunssfsi+0x46>
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	1a f0       	brmi	.+6      	; 0xc42 <__fixunssfsi+0x22>
 c3c:	ba 95       	dec	r27
 c3e:	c9 f7       	brne	.-14     	; 0xc32 <__fixunssfsi+0x12>
 c40:	12 c0       	rjmp	.+36     	; 0xc66 <__fixunssfsi+0x46>
 c42:	b1 30       	cpi	r27, 0x01	; 1
 c44:	81 f0       	breq	.+32     	; 0xc66 <__fixunssfsi+0x46>
 c46:	9f d0       	rcall	.+318    	; 0xd86 <__fp_zero>
 c48:	b1 e0       	ldi	r27, 0x01	; 1
 c4a:	08 95       	ret
 c4c:	9c c0       	rjmp	.+312    	; 0xd86 <__fp_zero>
 c4e:	67 2f       	mov	r22, r23
 c50:	78 2f       	mov	r23, r24
 c52:	88 27       	eor	r24, r24
 c54:	b8 5f       	subi	r27, 0xF8	; 248
 c56:	39 f0       	breq	.+14     	; 0xc66 <__fixunssfsi+0x46>
 c58:	b9 3f       	cpi	r27, 0xF9	; 249
 c5a:	cc f3       	brlt	.-14     	; 0xc4e <__fixunssfsi+0x2e>
 c5c:	86 95       	lsr	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b3 95       	inc	r27
 c64:	d9 f7       	brne	.-10     	; 0xc5c <__fixunssfsi+0x3c>
 c66:	3e f4       	brtc	.+14     	; 0xc76 <__fixunssfsi+0x56>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	08 95       	ret

00000c78 <__floatunsisf>:
 c78:	e8 94       	clt
 c7a:	09 c0       	rjmp	.+18     	; 0xc8e <__floatsisf+0x12>

00000c7c <__floatsisf>:
 c7c:	97 fb       	bst	r25, 7
 c7e:	3e f4       	brtc	.+14     	; 0xc8e <__floatsisf+0x12>
 c80:	90 95       	com	r25
 c82:	80 95       	com	r24
 c84:	70 95       	com	r23
 c86:	61 95       	neg	r22
 c88:	7f 4f       	sbci	r23, 0xFF	; 255
 c8a:	8f 4f       	sbci	r24, 0xFF	; 255
 c8c:	9f 4f       	sbci	r25, 0xFF	; 255
 c8e:	99 23       	and	r25, r25
 c90:	a9 f0       	breq	.+42     	; 0xcbc <__floatsisf+0x40>
 c92:	f9 2f       	mov	r31, r25
 c94:	96 e9       	ldi	r25, 0x96	; 150
 c96:	bb 27       	eor	r27, r27
 c98:	93 95       	inc	r25
 c9a:	f6 95       	lsr	r31
 c9c:	87 95       	ror	r24
 c9e:	77 95       	ror	r23
 ca0:	67 95       	ror	r22
 ca2:	b7 95       	ror	r27
 ca4:	f1 11       	cpse	r31, r1
 ca6:	f8 cf       	rjmp	.-16     	; 0xc98 <__floatsisf+0x1c>
 ca8:	fa f4       	brpl	.+62     	; 0xce8 <__floatsisf+0x6c>
 caa:	bb 0f       	add	r27, r27
 cac:	11 f4       	brne	.+4      	; 0xcb2 <__floatsisf+0x36>
 cae:	60 ff       	sbrs	r22, 0
 cb0:	1b c0       	rjmp	.+54     	; 0xce8 <__floatsisf+0x6c>
 cb2:	6f 5f       	subi	r22, 0xFF	; 255
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255
 cb6:	8f 4f       	sbci	r24, 0xFF	; 255
 cb8:	9f 4f       	sbci	r25, 0xFF	; 255
 cba:	16 c0       	rjmp	.+44     	; 0xce8 <__floatsisf+0x6c>
 cbc:	88 23       	and	r24, r24
 cbe:	11 f0       	breq	.+4      	; 0xcc4 <__floatsisf+0x48>
 cc0:	96 e9       	ldi	r25, 0x96	; 150
 cc2:	11 c0       	rjmp	.+34     	; 0xce6 <__floatsisf+0x6a>
 cc4:	77 23       	and	r23, r23
 cc6:	21 f0       	breq	.+8      	; 0xcd0 <__floatsisf+0x54>
 cc8:	9e e8       	ldi	r25, 0x8E	; 142
 cca:	87 2f       	mov	r24, r23
 ccc:	76 2f       	mov	r23, r22
 cce:	05 c0       	rjmp	.+10     	; 0xcda <__floatsisf+0x5e>
 cd0:	66 23       	and	r22, r22
 cd2:	71 f0       	breq	.+28     	; 0xcf0 <__floatsisf+0x74>
 cd4:	96 e8       	ldi	r25, 0x86	; 134
 cd6:	86 2f       	mov	r24, r22
 cd8:	70 e0       	ldi	r23, 0x00	; 0
 cda:	60 e0       	ldi	r22, 0x00	; 0
 cdc:	2a f0       	brmi	.+10     	; 0xce8 <__floatsisf+0x6c>
 cde:	9a 95       	dec	r25
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	da f7       	brpl	.-10     	; 0xcde <__floatsisf+0x62>
 ce8:	88 0f       	add	r24, r24
 cea:	96 95       	lsr	r25
 cec:	87 95       	ror	r24
 cee:	97 f9       	bld	r25, 7
 cf0:	08 95       	ret

00000cf2 <__fp_inf>:
 cf2:	97 f9       	bld	r25, 7
 cf4:	9f 67       	ori	r25, 0x7F	; 127
 cf6:	80 e8       	ldi	r24, 0x80	; 128
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	08 95       	ret

00000cfe <__fp_nan>:
 cfe:	9f ef       	ldi	r25, 0xFF	; 255
 d00:	80 ec       	ldi	r24, 0xC0	; 192
 d02:	08 95       	ret

00000d04 <__fp_pscA>:
 d04:	00 24       	eor	r0, r0
 d06:	0a 94       	dec	r0
 d08:	16 16       	cp	r1, r22
 d0a:	17 06       	cpc	r1, r23
 d0c:	18 06       	cpc	r1, r24
 d0e:	09 06       	cpc	r0, r25
 d10:	08 95       	ret

00000d12 <__fp_pscB>:
 d12:	00 24       	eor	r0, r0
 d14:	0a 94       	dec	r0
 d16:	12 16       	cp	r1, r18
 d18:	13 06       	cpc	r1, r19
 d1a:	14 06       	cpc	r1, r20
 d1c:	05 06       	cpc	r0, r21
 d1e:	08 95       	ret

00000d20 <__fp_round>:
 d20:	09 2e       	mov	r0, r25
 d22:	03 94       	inc	r0
 d24:	00 0c       	add	r0, r0
 d26:	11 f4       	brne	.+4      	; 0xd2c <__fp_round+0xc>
 d28:	88 23       	and	r24, r24
 d2a:	52 f0       	brmi	.+20     	; 0xd40 <__fp_round+0x20>
 d2c:	bb 0f       	add	r27, r27
 d2e:	40 f4       	brcc	.+16     	; 0xd40 <__fp_round+0x20>
 d30:	bf 2b       	or	r27, r31
 d32:	11 f4       	brne	.+4      	; 0xd38 <__fp_round+0x18>
 d34:	60 ff       	sbrs	r22, 0
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <__fp_round+0x20>
 d38:	6f 5f       	subi	r22, 0xFF	; 255
 d3a:	7f 4f       	sbci	r23, 0xFF	; 255
 d3c:	8f 4f       	sbci	r24, 0xFF	; 255
 d3e:	9f 4f       	sbci	r25, 0xFF	; 255
 d40:	08 95       	ret

00000d42 <__fp_split3>:
 d42:	57 fd       	sbrc	r21, 7
 d44:	90 58       	subi	r25, 0x80	; 128
 d46:	44 0f       	add	r20, r20
 d48:	55 1f       	adc	r21, r21
 d4a:	59 f0       	breq	.+22     	; 0xd62 <__fp_splitA+0x10>
 d4c:	5f 3f       	cpi	r21, 0xFF	; 255
 d4e:	71 f0       	breq	.+28     	; 0xd6c <__fp_splitA+0x1a>
 d50:	47 95       	ror	r20

00000d52 <__fp_splitA>:
 d52:	88 0f       	add	r24, r24
 d54:	97 fb       	bst	r25, 7
 d56:	99 1f       	adc	r25, r25
 d58:	61 f0       	breq	.+24     	; 0xd72 <__fp_splitA+0x20>
 d5a:	9f 3f       	cpi	r25, 0xFF	; 255
 d5c:	79 f0       	breq	.+30     	; 0xd7c <__fp_splitA+0x2a>
 d5e:	87 95       	ror	r24
 d60:	08 95       	ret
 d62:	12 16       	cp	r1, r18
 d64:	13 06       	cpc	r1, r19
 d66:	14 06       	cpc	r1, r20
 d68:	55 1f       	adc	r21, r21
 d6a:	f2 cf       	rjmp	.-28     	; 0xd50 <__fp_split3+0xe>
 d6c:	46 95       	lsr	r20
 d6e:	f1 df       	rcall	.-30     	; 0xd52 <__fp_splitA>
 d70:	08 c0       	rjmp	.+16     	; 0xd82 <__fp_splitA+0x30>
 d72:	16 16       	cp	r1, r22
 d74:	17 06       	cpc	r1, r23
 d76:	18 06       	cpc	r1, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	f1 cf       	rjmp	.-30     	; 0xd5e <__fp_splitA+0xc>
 d7c:	86 95       	lsr	r24
 d7e:	71 05       	cpc	r23, r1
 d80:	61 05       	cpc	r22, r1
 d82:	08 94       	sec
 d84:	08 95       	ret

00000d86 <__fp_zero>:
 d86:	e8 94       	clt

00000d88 <__fp_szero>:
 d88:	bb 27       	eor	r27, r27
 d8a:	66 27       	eor	r22, r22
 d8c:	77 27       	eor	r23, r23
 d8e:	cb 01       	movw	r24, r22
 d90:	97 f9       	bld	r25, 7
 d92:	08 95       	ret

00000d94 <__mulsf3>:
 d94:	0b d0       	rcall	.+22     	; 0xdac <__mulsf3x>
 d96:	c4 cf       	rjmp	.-120    	; 0xd20 <__fp_round>
 d98:	b5 df       	rcall	.-150    	; 0xd04 <__fp_pscA>
 d9a:	28 f0       	brcs	.+10     	; 0xda6 <__mulsf3+0x12>
 d9c:	ba df       	rcall	.-140    	; 0xd12 <__fp_pscB>
 d9e:	18 f0       	brcs	.+6      	; 0xda6 <__mulsf3+0x12>
 da0:	95 23       	and	r25, r21
 da2:	09 f0       	breq	.+2      	; 0xda6 <__mulsf3+0x12>
 da4:	a6 cf       	rjmp	.-180    	; 0xcf2 <__fp_inf>
 da6:	ab cf       	rjmp	.-170    	; 0xcfe <__fp_nan>
 da8:	11 24       	eor	r1, r1
 daa:	ee cf       	rjmp	.-36     	; 0xd88 <__fp_szero>

00000dac <__mulsf3x>:
 dac:	ca df       	rcall	.-108    	; 0xd42 <__fp_split3>
 dae:	a0 f3       	brcs	.-24     	; 0xd98 <__mulsf3+0x4>

00000db0 <__mulsf3_pse>:
 db0:	95 9f       	mul	r25, r21
 db2:	d1 f3       	breq	.-12     	; 0xda8 <__mulsf3+0x14>
 db4:	95 0f       	add	r25, r21
 db6:	50 e0       	ldi	r21, 0x00	; 0
 db8:	55 1f       	adc	r21, r21
 dba:	62 9f       	mul	r22, r18
 dbc:	f0 01       	movw	r30, r0
 dbe:	72 9f       	mul	r23, r18
 dc0:	bb 27       	eor	r27, r27
 dc2:	f0 0d       	add	r31, r0
 dc4:	b1 1d       	adc	r27, r1
 dc6:	63 9f       	mul	r22, r19
 dc8:	aa 27       	eor	r26, r26
 dca:	f0 0d       	add	r31, r0
 dcc:	b1 1d       	adc	r27, r1
 dce:	aa 1f       	adc	r26, r26
 dd0:	64 9f       	mul	r22, r20
 dd2:	66 27       	eor	r22, r22
 dd4:	b0 0d       	add	r27, r0
 dd6:	a1 1d       	adc	r26, r1
 dd8:	66 1f       	adc	r22, r22
 dda:	82 9f       	mul	r24, r18
 ddc:	22 27       	eor	r18, r18
 dde:	b0 0d       	add	r27, r0
 de0:	a1 1d       	adc	r26, r1
 de2:	62 1f       	adc	r22, r18
 de4:	73 9f       	mul	r23, r19
 de6:	b0 0d       	add	r27, r0
 de8:	a1 1d       	adc	r26, r1
 dea:	62 1f       	adc	r22, r18
 dec:	83 9f       	mul	r24, r19
 dee:	a0 0d       	add	r26, r0
 df0:	61 1d       	adc	r22, r1
 df2:	22 1f       	adc	r18, r18
 df4:	74 9f       	mul	r23, r20
 df6:	33 27       	eor	r19, r19
 df8:	a0 0d       	add	r26, r0
 dfa:	61 1d       	adc	r22, r1
 dfc:	23 1f       	adc	r18, r19
 dfe:	84 9f       	mul	r24, r20
 e00:	60 0d       	add	r22, r0
 e02:	21 1d       	adc	r18, r1
 e04:	82 2f       	mov	r24, r18
 e06:	76 2f       	mov	r23, r22
 e08:	6a 2f       	mov	r22, r26
 e0a:	11 24       	eor	r1, r1
 e0c:	9f 57       	subi	r25, 0x7F	; 127
 e0e:	50 40       	sbci	r21, 0x00	; 0
 e10:	8a f0       	brmi	.+34     	; 0xe34 <__mulsf3_pse+0x84>
 e12:	e1 f0       	breq	.+56     	; 0xe4c <__mulsf3_pse+0x9c>
 e14:	88 23       	and	r24, r24
 e16:	4a f0       	brmi	.+18     	; 0xe2a <__mulsf3_pse+0x7a>
 e18:	ee 0f       	add	r30, r30
 e1a:	ff 1f       	adc	r31, r31
 e1c:	bb 1f       	adc	r27, r27
 e1e:	66 1f       	adc	r22, r22
 e20:	77 1f       	adc	r23, r23
 e22:	88 1f       	adc	r24, r24
 e24:	91 50       	subi	r25, 0x01	; 1
 e26:	50 40       	sbci	r21, 0x00	; 0
 e28:	a9 f7       	brne	.-22     	; 0xe14 <__mulsf3_pse+0x64>
 e2a:	9e 3f       	cpi	r25, 0xFE	; 254
 e2c:	51 05       	cpc	r21, r1
 e2e:	70 f0       	brcs	.+28     	; 0xe4c <__mulsf3_pse+0x9c>
 e30:	60 cf       	rjmp	.-320    	; 0xcf2 <__fp_inf>
 e32:	aa cf       	rjmp	.-172    	; 0xd88 <__fp_szero>
 e34:	5f 3f       	cpi	r21, 0xFF	; 255
 e36:	ec f3       	brlt	.-6      	; 0xe32 <__mulsf3_pse+0x82>
 e38:	98 3e       	cpi	r25, 0xE8	; 232
 e3a:	dc f3       	brlt	.-10     	; 0xe32 <__mulsf3_pse+0x82>
 e3c:	86 95       	lsr	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	b7 95       	ror	r27
 e44:	f7 95       	ror	r31
 e46:	e7 95       	ror	r30
 e48:	9f 5f       	subi	r25, 0xFF	; 255
 e4a:	c1 f7       	brne	.-16     	; 0xe3c <__mulsf3_pse+0x8c>
 e4c:	fe 2b       	or	r31, r30
 e4e:	88 0f       	add	r24, r24
 e50:	91 1d       	adc	r25, r1
 e52:	96 95       	lsr	r25
 e54:	87 95       	ror	r24
 e56:	97 f9       	bld	r25, 7
 e58:	08 95       	ret

00000e5a <_exit>:
 e5a:	f8 94       	cli

00000e5c <__stop_program>:
 e5c:	ff cf       	rjmp	.-2      	; 0xe5c <__stop_program>
