
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000120a  0000129e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800126  00800126  000012c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c4  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a60  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d4  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000695  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000517d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 3a       	cpi	r26, 0xAD	; 173
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	5d d4       	rcall	.+2234   	; 0x97e <main>
      c4:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile double Kd_pos = 0.01;


void SetDutyCW(double v){
	
	while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	79 d6       	rcall	.+3314   	; 0xdda <__addsf3>
      e8:	44 d7       	rcall	.+3720   	; 0xf72 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
	
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}


void InitLS7366(){
     124:	cf 93       	push	r28
	
	PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	4c d6       	rcall	.+3224   	; 0xdc4 <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	4a d6       	rcall	.+3220   	; 0xdc4 <SPI_MasterSend>
	PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	45 d6       	rcall	.+3210   	; 0xdc4 <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13c:	43 d6       	rcall	.+3206   	; 0xdc4 <SPI_MasterSend>
	
	PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	3f d6       	rcall	.+3198   	; 0xdc4 <SPI_MasterSend>
	PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:



int getADC(char ch){

	ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
	return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:




ISR(USART0_RX_vect){
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31

	g_buf[g_BufWriteCnt++] = UDR0;
     174:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	e6 5c       	subi	r30, 0xC6	; 198
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_16>:




//ISR(TIMER3_OVF_vect){
ISR(TIMER0_OVF_vect){
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	0b b6       	in	r0, 0x3b	; 59
     1aa:	0f 92       	push	r0
     1ac:	4f 92       	push	r4
     1ae:	5f 92       	push	r5
     1b0:	6f 92       	push	r6
     1b2:	7f 92       	push	r7
     1b4:	8f 92       	push	r8
     1b6:	9f 92       	push	r9
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	4f 93       	push	r20
     1ca:	5f 93       	push	r21
     1cc:	6f 93       	push	r22
     1ce:	7f 93       	push	r23
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
     1d4:	af 93       	push	r26
     1d6:	bf 93       	push	r27
     1d8:	cf 93       	push	r28
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
			
	TCNT0 = 256 - 125;
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	82 bf       	out	0x32, r24	; 50
	//TCNT3 = 65536 - 125;		
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
     1e2:	c1 e0       	ldi	r28, 0x01	; 1
     1e4:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	b1 df       	rcall	.-158    	; 0x14c <getADC>
     1ea:	bc 01       	movw	r22, r24
     1ec:	99 0f       	add	r25, r25
     1ee:	88 0b       	sbc	r24, r24
     1f0:	99 0b       	sbc	r25, r25
     1f2:	f2 d6       	rcall	.+3556   	; 0xfd8 <__floatsisf>
     1f4:	60 93 8f 02 	sts	0x028F, r22	; 0x80028f <g_ADC>
     1f8:	70 93 90 02 	sts	0x0290, r23	; 0x800290 <g_ADC+0x1>
     1fc:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <g_ADC+0x2>
     200:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <g_ADC+0x3>
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | LOAD_REG);
     204:	18 ba       	out	0x18, r1	; 24
     206:	88 ee       	ldi	r24, 0xE8	; 232
     208:	dd d5       	rcall	.+3002   	; 0xdc4 <SPI_MasterSend>
	PORTB = 0x01;
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     20a:	c8 bb       	out	0x18, r28	; 24
     20c:	18 ba       	out	0x18, r1	; 24
     20e:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     210:	d9 d5       	rcall	.+2994   	; 0xdc4 <SPI_MasterSend>
     212:	dd d5       	rcall	.+3002   	; 0xdce <SPI_MasterRecv>
     214:	c8 2e       	mov	r12, r24
     216:	d1 2c       	mov	r13, r1
     218:	e1 2c       	mov	r14, r1
     21a:	f1 2c       	mov	r15, r1
     21c:	fe 2c       	mov	r15, r14
     21e:	ed 2c       	mov	r14, r13
     220:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     222:	cc 24       	eor	r12, r12
     224:	d4 d5       	rcall	.+2984   	; 0xdce <SPI_MasterRecv>
     226:	c8 2a       	or	r12, r24
     228:	fe 2c       	mov	r15, r14
     22a:	ed 2c       	mov	r14, r13
     22c:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     22e:	cc 24       	eor	r12, r12
     230:	ce d5       	rcall	.+2972   	; 0xdce <SPI_MasterRecv>
     232:	c8 2a       	or	r12, r24
     234:	fe 2c       	mov	r15, r14
     236:	ed 2c       	mov	r14, r13
     238:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     23a:	cc 24       	eor	r12, r12
     23c:	c8 d5       	rcall	.+2960   	; 0xdce <SPI_MasterRecv>
	PORTB = 0x01;
     23e:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
     240:	c8 2a       	or	r12, r24
     242:	f0 94       	com	r15
     244:	e0 94       	com	r14
     246:	d0 94       	com	r13
     248:	c0 94       	com	r12
     24a:	c1 1c       	adc	r12, r1
     24c:	d1 1c       	adc	r13, r1
     24e:	e1 1c       	adc	r14, r1
     250:	f1 1c       	adc	r15, r1
     252:	c0 92 9b 02 	sts	0x029B, r12	; 0x80029b <g_Cnt>
     256:	d0 92 9c 02 	sts	0x029C, r13	; 0x80029c <g_Cnt+0x1>
     25a:	e0 92 9d 02 	sts	0x029D, r14	; 0x80029d <g_Cnt+0x2>
     25e:	f0 92 9e 02 	sts	0x029E, r15	; 0x80029e <g_Cnt+0x3>
	
	PORTC = 0x03;
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	85 bb       	out	0x15, r24	; 21
	
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI; //[rpm]
     266:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <g_Cnt>
     26a:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <g_Cnt+0x1>
     26e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <g_Cnt+0x2>
     272:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <g_Cnt+0x3>
     276:	b0 d6       	rcall	.+3424   	; 0xfd8 <__floatsisf>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	42 ea       	ldi	r20, 0xA2	; 162
     27e:	58 e4       	ldi	r21, 0x48	; 72
     280:	10 d6       	rcall	.+3104   	; 0xea2 <__divsf3>
     282:	9b 01       	movw	r18, r22
     284:	ac 01       	movw	r20, r24
     286:	a9 d5       	rcall	.+2898   	; 0xdda <__addsf3>
     288:	2b ed       	ldi	r18, 0xDB	; 219
     28a:	3f e0       	ldi	r19, 0x0F	; 15
     28c:	49 e4       	ldi	r20, 0x49	; 73
     28e:	50 e4       	ldi	r21, 0x40	; 64
     290:	33 d7       	rcall	.+3686   	; 0x10f8 <__mulsf3>
     292:	60 93 a0 02 	sts	0x02A0, r22	; 0x8002a0 <g_Pcur>
     296:	70 93 a1 02 	sts	0x02A1, r23	; 0x8002a1 <g_Pcur+0x1>
     29a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <g_Pcur+0x2>
     29e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <g_Pcur+0x3>
	
	// TO DO : PID control (11/29)
	if((g_TimerCnt % 100) == 0){	//	50ms
     2a2:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <g_TimerCnt>
     2a6:	89 e2       	ldi	r24, 0x29	; 41
     2a8:	98 9f       	mul	r25, r24
     2aa:	81 2d       	mov	r24, r1
     2ac:	11 24       	eor	r1, r1
     2ae:	82 95       	swap	r24
     2b0:	8f 70       	andi	r24, 0x0F	; 15
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	82 9f       	mul	r24, r18
     2b6:	90 19       	sub	r25, r0
     2b8:	11 24       	eor	r1, r1
     2ba:	91 11       	cpse	r25, r1
     2bc:	c9 c0       	rjmp	.+402    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		// position control (PD) 
		g_TimerCnt = 0;
     2be:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_TimerCnt>
		
		g_Perr = g_Pdes - g_Pcur;	// error
     2c2:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
     2c6:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
     2ca:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     2ce:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     2d2:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <g_Pcur>
     2d6:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <g_Pcur+0x1>
     2da:	40 91 a2 02 	lds	r20, 0x02A2	; 0x8002a2 <g_Pcur+0x2>
     2de:	50 91 a3 02 	lds	r21, 0x02A3	; 0x8002a3 <g_Pcur+0x3>
     2e2:	7a d5       	rcall	.+2804   	; 0xdd8 <__subsf3>
     2e4:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <g_Perr>
     2e8:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <g_Perr+0x1>
     2ec:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <g_Perr+0x2>
     2f0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <g_Perr+0x3>
		g_P_derv = (g_Perr - g_P_derv_pre) / 0.05;	//derivate
     2f4:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Perr>
     2f8:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Perr+0x1>
     2fc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Perr+0x2>
     300:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Perr+0x3>
     304:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <g_P_derv_pre>
     308:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <g_P_derv_pre+0x1>
     30c:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <g_P_derv_pre+0x2>
     310:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <g_P_derv_pre+0x3>
     314:	61 d5       	rcall	.+2754   	; 0xdd8 <__subsf3>
     316:	2d ec       	ldi	r18, 0xCD	; 205
     318:	3c ec       	ldi	r19, 0xCC	; 204
     31a:	4c e4       	ldi	r20, 0x4C	; 76
     31c:	5d e3       	ldi	r21, 0x3D	; 61
     31e:	c1 d5       	rcall	.+2946   	; 0xea2 <__divsf3>
     320:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <g_P_derv>
     324:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <g_P_derv+0x1>
     328:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <g_P_derv+0x2>
     32c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <g_P_derv+0x3>
		g_P_derv_pre = g_Perr;
     330:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <g_Perr>
     334:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <g_Perr+0x1>
     338:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <g_Perr+0x2>
     33c:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <g_Perr+0x3>
     340:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <g_P_derv_pre>
     344:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <g_P_derv_pre+0x1>
     348:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <g_P_derv_pre+0x2>
     34c:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <g_P_derv_pre+0x3>
		
		g_pos_control = g_Perr * Kp_pos + g_P_derv * Kd_pos;	//error * pgain derivate*dgain
     350:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Perr>
     354:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Perr+0x1>
     358:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Perr+0x2>
     35c:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Perr+0x3>
     360:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Kp_pos>
     364:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Kp_pos+0x1>
     368:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Kp_pos+0x2>
     36c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Kp_pos+0x3>
     370:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <g_P_derv>
     374:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <g_P_derv+0x1>
     378:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <g_P_derv+0x2>
     37c:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <g_P_derv+0x3>
     380:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     384:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     388:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     38c:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     390:	b3 d6       	rcall	.+3430   	; 0x10f8 <__mulsf3>
     392:	6b 01       	movw	r12, r22
     394:	7c 01       	movw	r14, r24
     396:	a3 01       	movw	r20, r6
     398:	92 01       	movw	r18, r4
     39a:	c5 01       	movw	r24, r10
     39c:	b4 01       	movw	r22, r8
     39e:	ac d6       	rcall	.+3416   	; 0x10f8 <__mulsf3>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c7 01       	movw	r24, r14
     3a6:	b6 01       	movw	r22, r12
     3a8:	18 d5       	rcall	.+2608   	; 0xdda <__addsf3>
     3aa:	60 93 93 02 	sts	0x0293, r22	; 0x800293 <g_pos_control>
     3ae:	70 93 94 02 	sts	0x0294, r23	; 0x800294 <g_pos_control+0x1>
     3b2:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <g_pos_control+0x2>
     3b6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <g_pos_control+0x3>
		
		if(g_pos_control > g_Vlimit){
     3ba:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <g_pos_control>
     3be:	70 91 94 02 	lds	r23, 0x0294	; 0x800294 <g_pos_control+0x1>
     3c2:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <g_pos_control+0x2>
     3c6:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <g_pos_control+0x3>
     3ca:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <g_Vlimit>
     3ce:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <g_Vlimit+0x1>
     3d2:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <g_Vlimit+0x2>
     3d6:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <g_Vlimit+0x3>
     3da:	8a d6       	rcall	.+3348   	; 0x10f0 <__gesf2>
     3dc:	18 16       	cp	r1, r24
     3de:	8c f4       	brge	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
			g_pos_control = g_Vlimit;
     3e4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     3e8:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     3ec:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     3f0:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_pos_control>
     3f4:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <g_pos_control+0x1>
     3f8:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <g_pos_control+0x2>
     3fc:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <g_pos_control+0x3>
     400:	27 c0       	rjmp	.+78     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     402:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
		}
		else if(g_pos_control < -g_Vlimit){
     406:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     40a:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     40e:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     412:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <g_pos_control>
     416:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <g_pos_control+0x1>
     41a:	40 91 95 02 	lds	r20, 0x0295	; 0x800295 <g_pos_control+0x2>
     41e:	50 91 96 02 	lds	r21, 0x0296	; 0x800296 <g_pos_control+0x3>
     422:	bc 01       	movw	r22, r24
     424:	cd 01       	movw	r24, r26
     426:	90 58       	subi	r25, 0x80	; 128
     428:	63 d6       	rcall	.+3270   	; 0x10f0 <__gesf2>
     42a:	18 16       	cp	r1, r24
     42c:	8c f4       	brge	.+34     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     42e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
			g_pos_control = -g_Vlimit;
     432:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     436:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     43a:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     43e:	b0 58       	subi	r27, 0x80	; 128
     440:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_pos_control>
     444:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <g_pos_control+0x1>
     448:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <g_pos_control+0x2>
     44c:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <g_pos_control+0x3>
     450:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <g_TimerCnt>
		}
	}
	if((g_TimerCnt % 10) == 0){	// 5ms
     454:	8d ec       	ldi	r24, 0xCD	; 205
     456:	28 9f       	mul	r18, r24
     458:	81 2d       	mov	r24, r1
     45a:	11 24       	eor	r1, r1
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	86 95       	lsr	r24
     462:	88 0f       	add	r24, r24
     464:	98 2f       	mov	r25, r24
     466:	99 0f       	add	r25, r25
     468:	99 0f       	add	r25, r25
     46a:	89 0f       	add	r24, r25
     46c:	28 13       	cpse	r18, r24
     46e:	1f c1       	rjmp	.+574    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     470:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <g_pos_control>
		// velocity control
		g_Vdes = g_pos_control;
     474:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <g_pos_control+0x1>
     478:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <g_pos_control+0x2>
     47c:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <g_pos_control+0x3>
     480:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <g_Vdes>
     484:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <g_Vdes+0x1>
     488:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <g_Vdes+0x2>
     48c:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <g_Vdes+0x3>

		g_Vcur = (g_Pcur - g_Pvcur) / 0.005; //[rpm/s]
     490:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <g_Pcur>
     494:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <g_Pcur+0x1>
     498:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <g_Pcur+0x2>
     49c:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <g_Pcur+0x3>
     4a0:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <g_Pvcur>
     4a4:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <g_Pvcur+0x1>
     4a8:	40 91 a6 02 	lds	r20, 0x02A6	; 0x8002a6 <g_Pvcur+0x2>
     4ac:	50 91 a7 02 	lds	r21, 0x02A7	; 0x8002a7 <g_Pvcur+0x3>
     4b0:	93 d4       	rcall	.+2342   	; 0xdd8 <__subsf3>
     4b2:	2a e0       	ldi	r18, 0x0A	; 10
     4b4:	37 ed       	ldi	r19, 0xD7	; 215
     4b6:	43 ea       	ldi	r20, 0xA3	; 163
     4b8:	5b e3       	ldi	r21, 0x3B	; 59
     4ba:	f3 d4       	rcall	.+2534   	; 0xea2 <__divsf3>
     4bc:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <g_Vcur>
     4c0:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <g_Vcur+0x1>
     4c4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_Vcur+0x2>
     4c8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_Vcur+0x3>
     4cc:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <g_Pcur>
		g_Pvcur = g_Pcur;
     4d0:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <g_Pcur+0x1>
     4d4:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <g_Pcur+0x2>
     4d8:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <g_Pcur+0x3>
     4dc:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <g_Pvcur>
     4e0:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <g_Pvcur+0x1>
     4e4:	a0 93 a6 02 	sts	0x02A6, r26	; 0x8002a6 <g_Pvcur+0x2>
     4e8:	b0 93 a7 02 	sts	0x02A7, r27	; 0x8002a7 <g_Pvcur+0x3>
		
		g_Verr = g_Vdes - g_Vcur;
     4ec:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <g_Vdes>
     4f0:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <g_Vdes+0x1>
     4f4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_Vdes+0x2>
     4f8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <g_Vdes+0x3>
     4fc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <g_Vcur>
     500:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <g_Vcur+0x1>
     504:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <g_Vcur+0x2>
     508:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <g_Vcur+0x3>
     50c:	65 d4       	rcall	.+2250   	; 0xdd8 <__subsf3>
     50e:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <g_Verr>
     512:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <g_Verr+0x1>
     516:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <g_Verr+0x2>
     51a:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <g_Verr+0x3>
		g_Verr_sum += g_Verr;
     51e:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <g_Verr>
     522:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <g_Verr+0x1>
     526:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <g_Verr+0x2>
     52a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <g_Verr+0x3>
     52e:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <g_Verr_sum>
     532:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <g_Verr_sum+0x1>
     536:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <g_Verr_sum+0x2>
     53a:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <g_Verr_sum+0x3>
     53e:	4d d4       	rcall	.+2202   	; 0xdda <__addsf3>
     540:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <g_Verr_sum>
     544:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <g_Verr_sum+0x1>
     548:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <g_Verr_sum+0x2>
     54c:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <g_Verr_sum+0x3>
		
		//anti windup
		if(g_vel_control > g_Climit){
     550:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <g_vel_control>
     554:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <g_vel_control+0x1>
     558:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_vel_control+0x2>
     55c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_vel_control+0x3>
     560:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     564:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     568:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     56c:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     570:	bf d5       	rcall	.+2942   	; 0x10f0 <__gesf2>
     572:	18 16       	cp	r1, r24
     574:	0c f0       	brlt	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     576:	42 c0       	rjmp	.+132    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     578:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <g_vel_control>
			g_Verr_sum -= (g_vel_control - g_Climit) * 1/Kp_vel;
     57c:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <g_vel_control+0x1>
     580:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_vel_control+0x2>
     584:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_vel_control+0x3>
     588:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     58c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     590:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     594:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     598:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_vel>
     59c:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_vel+0x1>
     5a0:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_vel+0x2>
     5a4:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_vel+0x3>
     5a8:	c0 90 54 02 	lds	r12, 0x0254	; 0x800254 <g_Verr_sum>
     5ac:	d0 90 55 02 	lds	r13, 0x0255	; 0x800255 <g_Verr_sum+0x1>
     5b0:	e0 90 56 02 	lds	r14, 0x0256	; 0x800256 <g_Verr_sum+0x2>
     5b4:	f0 90 57 02 	lds	r15, 0x0257	; 0x800257 <g_Verr_sum+0x3>
     5b8:	0f d4       	rcall	.+2078   	; 0xdd8 <__subsf3>
     5ba:	a5 01       	movw	r20, r10
     5bc:	94 01       	movw	r18, r8
     5be:	71 d4       	rcall	.+2274   	; 0xea2 <__divsf3>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	c7 01       	movw	r24, r14
     5c6:	b6 01       	movw	r22, r12
     5c8:	07 d4       	rcall	.+2062   	; 0xdd8 <__subsf3>
     5ca:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <g_Verr_sum>
     5ce:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <g_Verr_sum+0x1>
     5d2:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <g_Verr_sum+0x2>
     5d6:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <g_Verr_sum+0x3>
     5da:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
			g_vel_control	 = g_Climit;
     5de:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     5e2:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     5e6:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     5ea:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_vel_control>
     5ee:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_vel_control+0x1>
     5f2:	a0 93 8c 02 	sts	0x028C, r26	; 0x80028c <g_vel_control+0x2>
     5f6:	b0 93 8d 02 	sts	0x028D, r27	; 0x80028d <g_vel_control+0x3>
     5fa:	59 c0       	rjmp	.+178    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
		}
		else if(g_vel_control < -g_Climit){
     5fc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
     600:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     604:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     608:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     60c:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <g_vel_control>
     610:	30 91 8b 02 	lds	r19, 0x028B	; 0x80028b <g_vel_control+0x1>
     614:	40 91 8c 02 	lds	r20, 0x028C	; 0x80028c <g_vel_control+0x2>
     618:	50 91 8d 02 	lds	r21, 0x028D	; 0x80028d <g_vel_control+0x3>
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	90 58       	subi	r25, 0x80	; 128
     622:	66 d5       	rcall	.+2764   	; 0x10f0 <__gesf2>
     624:	18 16       	cp	r1, r24
     626:	0c f0       	brlt	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     628:	42 c0       	rjmp	.+132    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     62a:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <g_vel_control>
			g_Verr_sum -= (g_vel_control + g_Climit) * 1/Kp_vel;
     62e:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <g_vel_control+0x1>
     632:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_vel_control+0x2>
     636:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_vel_control+0x3>
     63a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     63e:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     642:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     646:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     64a:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_vel>
     64e:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_vel+0x1>
     652:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_vel+0x2>
     656:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_vel+0x3>
     65a:	c0 90 54 02 	lds	r12, 0x0254	; 0x800254 <g_Verr_sum>
     65e:	d0 90 55 02 	lds	r13, 0x0255	; 0x800255 <g_Verr_sum+0x1>
     662:	e0 90 56 02 	lds	r14, 0x0256	; 0x800256 <g_Verr_sum+0x2>
     666:	f0 90 57 02 	lds	r15, 0x0257	; 0x800257 <g_Verr_sum+0x3>
     66a:	b7 d3       	rcall	.+1902   	; 0xdda <__addsf3>
     66c:	a5 01       	movw	r20, r10
     66e:	94 01       	movw	r18, r8
     670:	18 d4       	rcall	.+2096   	; 0xea2 <__divsf3>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	c7 01       	movw	r24, r14
     678:	b6 01       	movw	r22, r12
     67a:	ae d3       	rcall	.+1884   	; 0xdd8 <__subsf3>
     67c:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <g_Verr_sum>
     680:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <g_Verr_sum+0x1>
     684:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <g_Verr_sum+0x2>
     688:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <g_Verr_sum+0x3>
     68c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
			g_vel_control = -g_Climit;
     690:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     694:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     698:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     69c:	b0 58       	subi	r27, 0x80	; 128
     69e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_vel_control>
     6a2:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_vel_control+0x1>
     6a6:	a0 93 8c 02 	sts	0x028C, r26	; 0x80028c <g_vel_control+0x2>
     6aa:	b0 93 8d 02 	sts	0x028D, r27	; 0x80028d <g_vel_control+0x3>
     6ae:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_TimerCnt>
		 }		
	}
	g_TimerCnt++;
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_TimerCnt>
	
	g_Cdes = g_vel_control;
     6b8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <g_vel_control>
     6bc:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_vel_control+0x1>
     6c0:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <g_vel_control+0x2>
     6c4:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <g_vel_control+0x3>
     6c8:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <g_Cdes>
     6cc:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <g_Cdes+0x1>
     6d0:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <g_Cdes+0x2>
	
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);
     6d4:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <g_Cdes+0x3>
     6d8:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <g_ADC>
     6dc:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <g_ADC+0x1>
     6e0:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <g_ADC+0x2>
     6e4:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <g_ADC+0x3>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e8       	ldi	r20, 0x80	; 128
     6ee:	5a e3       	ldi	r21, 0x3A	; 58
     6f0:	03 d5       	rcall	.+2566   	; 0x10f8 <__mulsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 ea       	ldi	r20, 0xA0	; 160
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	fe d4       	rcall	.+2556   	; 0x10f8 <__mulsf3>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e2       	ldi	r20, 0x20	; 32
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	69 d3       	rcall	.+1746   	; 0xdd8 <__subsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e2       	ldi	r20, 0x20	; 32
     70c:	51 e4       	ldi	r21, 0x41	; 65
     70e:	f4 d4       	rcall	.+2536   	; 0x10f8 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	b0 58       	subi	r27, 0x80	; 128
     716:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <g_Ccur>
     71a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <g_Ccur+0x1>
     71e:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <g_Ccur+0x2>
     722:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <g_Ccur+0x3>
	g_Cerr = g_Cdes - g_Ccur;
     726:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <g_Cdes>
     72a:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <g_Cdes+0x1>
     72e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <g_Cdes+0x2>
     732:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <g_Cdes+0x3>
     736:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <g_Ccur>
     73a:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <g_Ccur+0x1>
     73e:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <g_Ccur+0x2>
     742:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <g_Ccur+0x3>
     746:	48 d3       	rcall	.+1680   	; 0xdd8 <__subsf3>
     748:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <g_Cerr>
     74c:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <g_Cerr+0x1>
     750:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_Cerr+0x2>
     754:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_Cerr+0x3>

	cur_control = g_Cerr * Kp_cur + g_Cerr_sum * Ki_cur * 0.0005;	//PI control
     758:	80 90 3e 02 	lds	r8, 0x023E	; 0x80023e <g_Cerr>
     75c:	90 90 3f 02 	lds	r9, 0x023F	; 0x80023f <g_Cerr+0x1>
     760:	a0 90 40 02 	lds	r10, 0x0240	; 0x800240 <g_Cerr+0x2>
     764:	b0 90 41 02 	lds	r11, 0x0241	; 0x800241 <g_Cerr+0x3>
     768:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <Kp_cur>
     76c:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <Kp_cur+0x1>
     770:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <Kp_cur+0x2>
     774:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <Kp_cur+0x3>
     778:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <g_Cerr_sum>
     77c:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <g_Cerr_sum+0x1>
     780:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <g_Cerr_sum+0x2>
     784:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <g_Cerr_sum+0x3>
     788:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Ki_cur>
     78c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Ki_cur+0x1>
     790:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Ki_cur+0x2>
     794:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Ki_cur+0x3>
     798:	af d4       	rcall	.+2398   	; 0x10f8 <__mulsf3>
     79a:	2f e6       	ldi	r18, 0x6F	; 111
     79c:	32 e1       	ldi	r19, 0x12	; 18
     79e:	43 e0       	ldi	r20, 0x03	; 3
     7a0:	5a e3       	ldi	r21, 0x3A	; 58
     7a2:	aa d4       	rcall	.+2388   	; 0x10f8 <__mulsf3>
     7a4:	6b 01       	movw	r12, r22
     7a6:	7c 01       	movw	r14, r24
     7a8:	a3 01       	movw	r20, r6
     7aa:	92 01       	movw	r18, r4
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	a3 d4       	rcall	.+2374   	; 0x10f8 <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0f d3       	rcall	.+1566   	; 0xdda <__addsf3>
     7bc:	da d3       	rcall	.+1972   	; 0xf72 <__fixsfsi>
     7be:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
	
	cur_control += g_Vcur * 0.0683;
     7c2:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
     7c6:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <g_Vcur>
     7ca:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <g_Vcur+0x1>
     7ce:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_Vcur+0x2>
     7d2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <g_Vcur+0x3>
     7d6:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <__data_end>
     7da:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <__data_end+0x1>
     7de:	2f ed       	ldi	r18, 0xDF	; 223
     7e0:	30 ee       	ldi	r19, 0xE0	; 224
     7e2:	4b e8       	ldi	r20, 0x8B	; 139
     7e4:	5d e3       	ldi	r21, 0x3D	; 61
     7e6:	88 d4       	rcall	.+2320   	; 0x10f8 <__mulsf3>
     7e8:	4b 01       	movw	r8, r22
     7ea:	5c 01       	movw	r10, r24
     7ec:	b7 01       	movw	r22, r14
     7ee:	ff 0c       	add	r15, r15
     7f0:	88 0b       	sbc	r24, r24
     7f2:	99 0b       	sbc	r25, r25
     7f4:	f1 d3       	rcall	.+2018   	; 0xfd8 <__floatsisf>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	c5 01       	movw	r24, r10
     7fc:	b4 01       	movw	r22, r8
     7fe:	ed d2       	rcall	.+1498   	; 0xdda <__addsf3>
     800:	b8 d3       	rcall	.+1904   	; 0xf72 <__fixsfsi>
     802:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
     806:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
	
	g_Cerr_sum += g_Cerr;
     80a:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <g_Cerr>
     80e:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <g_Cerr+0x1>
     812:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <g_Cerr+0x2>
     816:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <g_Cerr+0x3>
     81a:	20 91 a8 02 	lds	r18, 0x02A8	; 0x8002a8 <g_Cerr_sum>
     81e:	30 91 a9 02 	lds	r19, 0x02A9	; 0x8002a9 <g_Cerr_sum+0x1>
     822:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <g_Cerr_sum+0x2>
     826:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <g_Cerr_sum+0x3>
     82a:	d7 d2       	rcall	.+1454   	; 0xdda <__addsf3>
     82c:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <g_Cerr_sum>
     830:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <g_Cerr_sum+0x1>
     834:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <g_Cerr_sum+0x2>
	
	
	
	//I-term anti
	if(cur_control > 24){
     838:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <g_Cerr_sum+0x3>
     83c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     840:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
		cur_control = 24;
     844:	49 97       	sbiw	r24, 0x19	; 25
     846:	8c f1       	brlt	.+98     	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
		g_Cerr_sum -= (cur_control - 24) * 1. / 0.0827 / 3.;
     850:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     854:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     858:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     85c:	c0 90 a8 02 	lds	r12, 0x02A8	; 0x8002a8 <g_Cerr_sum>
     860:	d0 90 a9 02 	lds	r13, 0x02A9	; 0x8002a9 <g_Cerr_sum+0x1>
     864:	e0 90 aa 02 	lds	r14, 0x02AA	; 0x8002aa <g_Cerr_sum+0x2>
     868:	f0 90 ab 02 	lds	r15, 0x02AB	; 0x8002ab <g_Cerr_sum+0x3>
     86c:	68 51       	subi	r22, 0x18	; 24
     86e:	71 09       	sbc	r23, r1
     870:	07 2e       	mov	r0, r23
     872:	00 0c       	add	r0, r0
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	af d3       	rcall	.+1886   	; 0xfd8 <__floatsisf>
     87a:	2e e9       	ldi	r18, 0x9E	; 158
     87c:	3e e5       	ldi	r19, 0x5E	; 94
     87e:	49 ea       	ldi	r20, 0xA9	; 169
     880:	5d e3       	ldi	r21, 0x3D	; 61
     882:	0f d3       	rcall	.+1566   	; 0xea2 <__divsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e4       	ldi	r20, 0x40	; 64
     88a:	50 e4       	ldi	r21, 0x40	; 64
     88c:	0a d3       	rcall	.+1556   	; 0xea2 <__divsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	a0 d2       	rcall	.+1344   	; 0xdd8 <__subsf3>
     898:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <g_Cerr_sum>
     89c:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <g_Cerr_sum+0x1>
     8a0:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <g_Cerr_sum+0x2>
     8a4:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <g_Cerr_sum+0x3>
	}
	else if(cur_control < -24){
     8a8:	37 c0       	rjmp	.+110    	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
     8aa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     8ae:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     8b2:	88 3e       	cpi	r24, 0xE8	; 232
		cur_control = -24;
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	84 f5       	brge	.+96     	; 0x918 <__LOCK_REGION_LENGTH__+0x518>
     8b8:	88 ee       	ldi	r24, 0xE8	; 232
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
     8bc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
		g_Cerr_sum -= (cur_control + 24) * 1. / 0.0827 / 3.;
     8c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     8c4:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     8c8:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     8cc:	c0 90 a8 02 	lds	r12, 0x02A8	; 0x8002a8 <g_Cerr_sum>
     8d0:	d0 90 a9 02 	lds	r13, 0x02A9	; 0x8002a9 <g_Cerr_sum+0x1>
     8d4:	e0 90 aa 02 	lds	r14, 0x02AA	; 0x8002aa <g_Cerr_sum+0x2>
     8d8:	f0 90 ab 02 	lds	r15, 0x02AB	; 0x8002ab <g_Cerr_sum+0x3>
     8dc:	68 5e       	subi	r22, 0xE8	; 232
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	07 2e       	mov	r0, r23
     8e2:	00 0c       	add	r0, r0
     8e4:	88 0b       	sbc	r24, r24
     8e6:	99 0b       	sbc	r25, r25
     8e8:	77 d3       	rcall	.+1774   	; 0xfd8 <__floatsisf>
     8ea:	2e e9       	ldi	r18, 0x9E	; 158
     8ec:	3e e5       	ldi	r19, 0x5E	; 94
     8ee:	49 ea       	ldi	r20, 0xA9	; 169
     8f0:	5d e3       	ldi	r21, 0x3D	; 61
     8f2:	d7 d2       	rcall	.+1454   	; 0xea2 <__divsf3>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e4       	ldi	r20, 0x40	; 64
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	d2 d2       	rcall	.+1444   	; 0xea2 <__divsf3>
     8fe:	9b 01       	movw	r18, r22
     900:	ac 01       	movw	r20, r24
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	68 d2       	rcall	.+1232   	; 0xdd8 <__subsf3>
     908:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <g_Cerr_sum>
     90c:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <g_Cerr_sum+0x1>
     910:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <g_Cerr_sum+0x2>
     914:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <g_Cerr_sum+0x3>
	}
	
	SetDutyCW(cur_control);
     918:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     91c:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     920:	07 2e       	mov	r0, r23
     922:	00 0c       	add	r0, r0
     924:	88 0b       	sbc	r24, r24
     926:	99 0b       	sbc	r25, r25
     928:	57 d3       	rcall	.+1710   	; 0xfd8 <__floatsisf>
     92a:	cf db       	rcall	.-2146   	; 0xca <SetDutyCW>
     92c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
	
	/////////////////////////////////////////
	
	g_SendFlag++;
     930:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_SendFlag+0x1>
     93a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_SendFlag>
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30

}
     942:	cf 91       	pop	r28
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	8f 90       	pop	r8
     968:	7f 90       	pop	r7
     96a:	6f 90       	pop	r6
     96c:	5f 90       	pop	r5
     96e:	4f 90       	pop	r4
     970:	0f 90       	pop	r0
     972:	0b be       	out	0x3b, r0	; 59
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <main>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29



int main(void){
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	ac 97       	sbiw	r28, 0x2c	; 44
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
	
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     992:	8e ef       	ldi	r24, 0xFE	; 254
     994:	8c 83       	std	Y+4, r24	; 0x04
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	8a 83       	std	Y+2, r24	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
     99c:	ba d1       	rcall	.+884    	; 0xd12 <InitIO>
	
	//Uart
	InitUart0();
     99e:	00 d2       	rcall	.+1024   	; 0xda0 <InitUart0>
	
	//SPI
	InitSPI();
     9a0:	08 d2       	rcall	.+1040   	; 0xdb2 <InitSPI>
	
	//Timer
	InitTimer0();
     9a2:	c4 d1       	rcall	.+904    	; 0xd2c <InitTimer0>
     9a4:	c8 d1       	rcall	.+912    	; 0xd36 <InitTimer1>
	InitTimer1();
     9a6:	da d1       	rcall	.+948    	; 0xd5c <InitTimer3>
     9a8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     9ac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     9b0:	1d bc       	out	0x2d, r1	; 45
     9b2:	1c bc       	out	0x2c, r1	; 44
     9b4:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	cb 01       	movw	r24, r22
     9ba:	87 db       	rcall	.-2290   	; 0xca <SetDutyCW>
     9bc:	ec d1       	rcall	.+984    	; 0xd96 <InitADC>
     9be:	b2 db       	rcall	.-2204   	; 0x124 <InitLS7366>
	
	//ADC
	InitADC();
     9c0:	83 e8       	ldi	r24, 0x83	; 131
     9c2:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     9c4:	78 94       	sei
     9c6:	b1 2c       	mov	r11, r1
	
	//TCNT3 = 65536 - 125;
	TCNT0 = 256 - 125;
     9c8:	0f 2e       	mov	r0, r31
     9ca:	fc e2       	ldi	r31, 0x2C	; 44
	sei();
     9cc:	9f 2e       	mov	r9, r31

	unsigned char check = 0;
     9ce:	f0 2d       	mov	r31, r0
			//AVR -> ODE
			g_SendFlag = 0;			
			
				
			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f3 e0       	ldi	r31, 0x03	; 3
     9d4:	af 2e       	mov	r10, r31
     9d6:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
     9d8:	7e 01       	movw	r14, r28
     9da:	8d e2       	ldi	r24, 0x2D	; 45
     9dc:	e8 0e       	add	r14, r24
     9de:	f1 1c       	adc	r15, r1
     9e0:	0f 2e       	mov	r0, r31
     9e2:	fa e5       	ldi	r31, 0x5A	; 90
     9e4:	cf 2e       	mov	r12, r31
     9e6:	f2 e0       	ldi	r31, 0x02	; 2
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
				
				if (checkSize == 8) {
					if(g_PacketBuffer.data.id == g_ID){
     9e8:	df 2e       	mov	r13, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	68 94       	set
     9ee:	77 24       	eor	r7, r7
     9f0:	71 f8       	bld	r7, 1
     9f2:	88 24       	eor	r8, r8

						g_PacketMode = 2;
     9f4:	83 94       	inc	r8
     9f6:	2d c1       	rjmp	.+602    	; 0xc52 <main+0x2d4>
     9f8:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <g_PacketMode>
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
					checkSize++;
					if (checkSize == 4) {
						g_PacketMode = 1;
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	e1 f0       	breq	.+56     	; 0xa38 <main+0xba>
	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
			
			switch(g_PacketMode){
     a00:	18 f0       	brcs	.+6      	; 0xa08 <main+0x8a>
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	e1 f1       	breq	.+120    	; 0xa7e <main+0x100>
     a06:	20 c1       	rjmp	.+576    	; 0xc48 <main+0x2ca>
     a08:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <g_BufReadCnt>
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	e6 5c       	subi	r30, 0xC6	; 198
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) {
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	80 81       	ld	r24, Z
     a14:	8f 3f       	cpi	r24, 0xFF	; 255
     a16:	69 f4       	brne	.+26     	; 0xa32 <main+0xb4>
     a18:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <checkSize>
					checkSize++;
     a22:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	09 f0       	breq	.+2      	; 0xa2c <main+0xae>
					if (checkSize == 4) {
     a2a:	0e c1       	rjmp	.+540    	; 0xc48 <main+0x2ca>
     a2c:	80 92 ac 02 	sts	0x02AC, r8	; 0x8002ac <g_PacketMode>
     a30:	0b c1       	rjmp	.+534    	; 0xc48 <main+0x2ca>
     a32:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <checkSize>
						g_PacketMode = 1;
     a36:	08 c1       	rjmp	.+528    	; 0xc48 <main+0x2ca>
     a38:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <checkSize>
					}
				}
				else {
					checkSize = 0;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	8e 0f       	add	r24, r30
				}
				break;
				
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     a40:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <checkSize>
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	a0 91 9f 02 	lds	r26, 0x029F	; 0x80029f <g_BufReadCnt>
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	a6 5c       	subi	r26, 0xC6	; 198
     a4e:	be 4f       	sbci	r27, 0xFE	; 254
     a50:	8c 91       	ld	r24, X
     a52:	e6 5a       	subi	r30, 0xA6	; 166
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	80 83       	st	Z, r24
     a58:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
     a5c:	88 30       	cpi	r24, 0x08	; 8
     a5e:	09 f0       	breq	.+2      	; 0xa62 <main+0xe4>
				
				if (checkSize == 8) {
     a60:	f3 c0       	rjmp	.+486    	; 0xc48 <main+0x2ca>
     a62:	f6 01       	movw	r30, r12
     a64:	95 81       	ldd	r25, Z+5	; 0x05
     a66:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
					if(g_PacketBuffer.data.id == g_ID){
     a6a:	98 13       	cpse	r25, r24
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <main+0xf6>
     a6e:	70 92 ac 02 	sts	0x02AC, r7	; 0x8002ac <g_PacketMode>
     a72:	ea c0       	rjmp	.+468    	; 0xc48 <main+0x2ca>
     a74:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <g_PacketMode>

						g_PacketMode = 2;
     a78:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <checkSize>
					}
					else{
						g_PacketMode = 0;
     a7c:	e5 c0       	rjmp	.+458    	; 0xc48 <main+0x2ca>
     a7e:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <checkSize>
						checkSize = 0;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	8e 0f       	add	r24, r30

				break;
			
			case 2:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     a86:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <checkSize>
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	a0 91 9f 02 	lds	r26, 0x029F	; 0x80029f <g_BufReadCnt>
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	a6 5c       	subi	r26, 0xC6	; 198
     a94:	be 4f       	sbci	r27, 0xFE	; 254
     a96:	8c 91       	ld	r24, X
     a98:	e6 5a       	subi	r30, 0xA6	; 166
     a9a:	fd 4f       	sbci	r31, 0xFD	; 253
     a9c:	80 83       	st	Z, r24
     a9e:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <g_BufReadCnt>
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e6 5c       	subi	r30, 0xC6	; 198
				check += g_buf[g_BufReadCnt];
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	80 81       	ld	r24, Z
     aaa:	b8 0e       	add	r11, r24
     aac:	f6 01       	movw	r30, r12
     aae:	94 81       	ldd	r25, Z+4	; 0x04
     ab0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) {
     ab4:	98 13       	cpse	r25, r24
     ab6:	b7 c0       	rjmp	.+366    	; 0xc26 <main+0x2a8>
     ab8:	87 81       	ldd	r24, Z+7	; 0x07
     aba:	b8 12       	cpse	r11, r24
     abc:	ae c0       	rjmp	.+348    	; 0xc1a <main+0x29c>
     abe:	86 81       	ldd	r24, Z+6	; 0x06

					if(check == g_PacketBuffer.data.check){
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	09 f0       	breq	.+2      	; 0xac6 <main+0x148>

						switch(g_PacketBuffer.data.mode){
     ac4:	aa c0       	rjmp	.+340    	; 0xc1a <main+0x29c>
     ac6:	60 85       	ldd	r22, Z+8	; 0x08
     ac8:	71 85       	ldd	r23, Z+9	; 0x09
     aca:	82 85       	ldd	r24, Z+10	; 0x0a

							case 2:
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
     acc:	93 85       	ldd	r25, Z+11	; 0x0b
     ace:	84 d2       	rcall	.+1288   	; 0xfd8 <__floatsisf>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	4a e7       	ldi	r20, 0x7A	; 122
     ad6:	54 e4       	ldi	r21, 0x44	; 68
     ad8:	e4 d1       	rcall	.+968    	; 0xea2 <__divsf3>
     ada:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <g_Pdes>
     ade:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <g_Pdes+0x1>
     ae2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Pdes+0x2>
     ae6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Pdes+0x3>
     aea:	f6 01       	movw	r30, r12
     aec:	64 85       	ldd	r22, Z+12	; 0x0c
     aee:	75 85       	ldd	r23, Z+13	; 0x0d
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
     af0:	86 85       	ldd	r24, Z+14	; 0x0e
     af2:	97 85       	ldd	r25, Z+15	; 0x0f
     af4:	71 d2       	rcall	.+1250   	; 0xfd8 <__floatsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	d1 d1       	rcall	.+930    	; 0xea2 <__divsf3>
     b00:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <g_Vlimit>
     b04:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <g_Vlimit+0x1>
     b08:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_Vlimit+0x2>
     b0c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_Vlimit+0x3>
     b10:	f6 01       	movw	r30, r12
     b12:	60 89       	ldd	r22, Z+16	; 0x10
     b14:	71 89       	ldd	r23, Z+17	; 0x11
							g_Climit = g_PacketBuffer.data.cur / 1000.;
     b16:	82 89       	ldd	r24, Z+18	; 0x12
     b18:	93 89       	ldd	r25, Z+19	; 0x13
     b1a:	5e d2       	rcall	.+1212   	; 0xfd8 <__floatsisf>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	4a e7       	ldi	r20, 0x7A	; 122
     b22:	54 e4       	ldi	r21, 0x44	; 68
     b24:	be d1       	rcall	.+892    	; 0xea2 <__divsf3>
     b26:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_Climit>
     b2a:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_Climit+0x1>
     b2e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_Climit+0x2>
     b32:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_Climit+0x3>
     b36:	f6 01       	movw	r30, r12
     b38:	64 89       	ldd	r22, Z+20	; 0x14
     b3a:	75 89       	ldd	r23, Z+21	; 0x15
							
							//get control values(ODE->AVR)
							Kp_cur = g_PacketBuffer.data.Kp_cur / 1000.;
     b3c:	86 89       	ldd	r24, Z+22	; 0x16
     b3e:	97 89       	ldd	r25, Z+23	; 0x17
     b40:	4b d2       	rcall	.+1174   	; 0xfd8 <__floatsisf>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4a e7       	ldi	r20, 0x7A	; 122
     b48:	54 e4       	ldi	r21, 0x44	; 68
     b4a:	ab d1       	rcall	.+854    	; 0xea2 <__divsf3>
     b4c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <Kp_cur>
     b50:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <Kp_cur+0x1>
     b54:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Kp_cur+0x2>
     b58:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Kp_cur+0x3>
     b5c:	f6 01       	movw	r30, r12
     b5e:	60 8d       	ldd	r22, Z+24	; 0x18
     b60:	71 8d       	ldd	r23, Z+25	; 0x19
							Ki_cur = g_PacketBuffer.data.Ki_cur / 1000.;
     b62:	82 8d       	ldd	r24, Z+26	; 0x1a
     b64:	93 8d       	ldd	r25, Z+27	; 0x1b
     b66:	38 d2       	rcall	.+1136   	; 0xfd8 <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	4a e7       	ldi	r20, 0x7A	; 122
     b6e:	54 e4       	ldi	r21, 0x44	; 68
     b70:	98 d1       	rcall	.+816    	; 0xea2 <__divsf3>
     b72:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <Ki_cur>
     b76:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <Ki_cur+0x1>
     b7a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Ki_cur+0x2>
     b7e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Ki_cur+0x3>
     b82:	f6 01       	movw	r30, r12
     b84:	64 8d       	ldd	r22, Z+28	; 0x1c
     b86:	75 8d       	ldd	r23, Z+29	; 0x1d
							Kp_vel = g_PacketBuffer.data.Kp_vel / 1000.;
     b88:	86 8d       	ldd	r24, Z+30	; 0x1e
     b8a:	97 8d       	ldd	r25, Z+31	; 0x1f
     b8c:	25 d2       	rcall	.+1098   	; 0xfd8 <__floatsisf>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	4a e7       	ldi	r20, 0x7A	; 122
     b94:	54 e4       	ldi	r21, 0x44	; 68
     b96:	85 d1       	rcall	.+778    	; 0xea2 <__divsf3>
     b98:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <Kp_vel>
     b9c:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <Kp_vel+0x1>
     ba0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Kp_vel+0x2>
     ba4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Kp_vel+0x3>
     ba8:	f6 01       	movw	r30, r12
     baa:	60 a1       	ldd	r22, Z+32	; 0x20
     bac:	71 a1       	ldd	r23, Z+33	; 0x21
							Ki_vel = g_PacketBuffer.data.Ki_vel / 1000.;
     bae:	82 a1       	ldd	r24, Z+34	; 0x22
     bb0:	93 a1       	ldd	r25, Z+35	; 0x23
     bb2:	12 d2       	rcall	.+1060   	; 0xfd8 <__floatsisf>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4a e7       	ldi	r20, 0x7A	; 122
     bba:	54 e4       	ldi	r21, 0x44	; 68
     bbc:	72 d1       	rcall	.+740    	; 0xea2 <__divsf3>
     bbe:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Ki_vel>
     bc2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <Ki_vel+0x1>
     bc6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Ki_vel+0x2>
     bca:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <Ki_vel+0x3>
     bce:	f6 01       	movw	r30, r12
     bd0:	64 a1       	ldd	r22, Z+36	; 0x24
     bd2:	75 a1       	ldd	r23, Z+37	; 0x25
							Kp_pos = g_PacketBuffer.data.Kp_pos / 1000.;
     bd4:	86 a1       	ldd	r24, Z+38	; 0x26
     bd6:	97 a1       	ldd	r25, Z+39	; 0x27
     bd8:	ff d1       	rcall	.+1022   	; 0xfd8 <__floatsisf>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a e7       	ldi	r20, 0x7A	; 122
     be0:	54 e4       	ldi	r21, 0x44	; 68
     be2:	5f d1       	rcall	.+702    	; 0xea2 <__divsf3>
     be4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <Kp_pos>
     be8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <Kp_pos+0x1>
     bec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Kp_pos+0x2>
     bf0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Kp_pos+0x3>
     bf4:	f6 01       	movw	r30, r12
     bf6:	60 a5       	ldd	r22, Z+40	; 0x28
     bf8:	71 a5       	ldd	r23, Z+41	; 0x29
							Kd_pos = g_PacketBuffer.data.Kd_pos / 1000.;							
     bfa:	82 a5       	ldd	r24, Z+42	; 0x2a
     bfc:	93 a5       	ldd	r25, Z+43	; 0x2b
     bfe:	ec d1       	rcall	.+984    	; 0xfd8 <__floatsisf>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	4a e7       	ldi	r20, 0x7A	; 122
     c06:	54 e4       	ldi	r21, 0x44	; 68
     c08:	4c d1       	rcall	.+664    	; 0xea2 <__divsf3>
     c0a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     c0e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c12:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c16:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c1a:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <g_PacketMode>
     c1e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <checkSize>
							break;
							}
					}
					
					check = 0;
					g_PacketMode = 0;
     c22:	b1 2c       	mov	r11, r1
     c24:	11 c0       	rjmp	.+34     	; 0xc48 <main+0x2ca>
					checkSize = 0;
     c26:	f6 01       	movw	r30, r12
     c28:	94 81       	ldd	r25, Z+4	; 0x04
							Kd_pos = g_PacketBuffer.data.Kd_pos / 1000.;							
							break;
							}
					}
					
					check = 0;
     c2a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
					g_PacketMode = 0;
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     c2e:	98 17       	cp	r25, r24
     c30:	20 f0       	brcs	.+8      	; 0xc3a <main+0x2bc>
     c32:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <checkSize>
     c36:	8d 32       	cpi	r24, 0x2D	; 45
     c38:	38 f0       	brcs	.+14     	; 0xc48 <main+0x2ca>
     c3a:	86 e6       	ldi	r24, 0x66	; 102
     c3c:	bf d0       	rcall	.+382    	; 0xdbc <TransUart0>
     c3e:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <g_PacketMode>
					TransUart0('f');
     c42:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <checkSize>
     c46:	b1 2c       	mov	r11, r1
					check = 0;
					g_PacketMode = 0;
     c48:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <g_BufReadCnt>
					checkSize = 0;
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <g_BufReadCnt>
	sei();

	unsigned char check = 0;
	
    while (1) {
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     c52:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <g_BufReadCnt>
     c56:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <g_BufWriteCnt>
     c5a:	98 13       	cpse	r25, r24
     c5c:	cd ce       	rjmp	.-614    	; 0x9f8 <main+0x7a>
     c5e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_SendFlag>
     c62:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_SendFlag+0x1>
     c66:	44 97       	sbiw	r24, 0x14	; 20
					checkSize = 0;
				}
			}
		}

		if(g_SendFlag > 19){
     c68:	a4 f3       	brlt	.-24     	; 0xc52 <main+0x2d4>
     c6a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <g_SendFlag+0x1>
     c6e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <g_SendFlag>
			//AVR -> ODE
			g_SendFlag = 0;			
     c72:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
     c76:	8e 83       	std	Y+6, r24	; 0x06
			
				
			packet.data.id = g_ID;
     c78:	9d 82       	std	Y+5, r9	; 0x05
     c7a:	af 82       	std	Y+7, r10	; 0x07
     c7c:	18 86       	std	Y+8, r1	; 0x08
			packet.data.size = sizeof(Packet_data_t);
     c7e:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_Pdes>
			packet.data.mode = 3;
			packet.data.check = 0;
     c82:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_Pdes+0x1>
			
			//현재 모터 값으로 수정을 해야한다.
			packet.data.pos = g_Pdes * 1000;    
     c86:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_Pdes+0x2>
     c8a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_Pdes+0x3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	4a e7       	ldi	r20, 0x7A	; 122
     c94:	54 e4       	ldi	r21, 0x44	; 68
     c96:	30 d2       	rcall	.+1120   	; 0x10f8 <__mulsf3>
     c98:	6c d1       	rcall	.+728    	; 0xf72 <__fixsfsi>
     c9a:	69 87       	std	Y+9, r22	; 0x09
     c9c:	7a 87       	std	Y+10, r23	; 0x0a
     c9e:	8b 87       	std	Y+11, r24	; 0x0b
     ca0:	9c 87       	std	Y+12, r25	; 0x0c
     ca2:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_Vlimit>
     ca6:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <g_Vlimit+0x1>
			packet.data.velo = g_Vlimit * 1000; 
     caa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <g_Vlimit+0x2>
     cae:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <g_Vlimit+0x3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	1e d2       	rcall	.+1084   	; 0x10f8 <__mulsf3>
     cbc:	5a d1       	rcall	.+692    	; 0xf72 <__fixsfsi>
     cbe:	6d 87       	std	Y+13, r22	; 0x0d
     cc0:	7e 87       	std	Y+14, r23	; 0x0e
     cc2:	8f 87       	std	Y+15, r24	; 0x0f
     cc4:	98 8b       	std	Y+16, r25	; 0x10
     cc6:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <g_Climit>
     cca:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <g_Climit+0x1>
			packet.data.cur = g_Climit * 1000;  
     cce:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_Climit+0x2>
     cd2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_Climit+0x3>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a e7       	ldi	r20, 0x7A	; 122
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0c d2       	rcall	.+1048   	; 0x10f8 <__mulsf3>
     ce0:	48 d1       	rcall	.+656    	; 0xf72 <__fixsfsi>
     ce2:	69 8b       	std	Y+17, r22	; 0x11
     ce4:	7a 8b       	std	Y+18, r23	; 0x12
     ce6:	8b 8b       	std	Y+19, r24	; 0x13
     ce8:	9c 8b       	std	Y+20, r25	; 0x14
     cea:	fe 01       	movw	r30, r28
     cec:	39 96       	adiw	r30, 0x09	; 9
     cee:	81 91       	ld	r24, Z+
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	89 0f       	add	r24, r25
     cf4:	88 87       	std	Y+8, r24	; 0x08
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
     cf6:	ee 15       	cp	r30, r14
     cf8:	ff 05       	cpc	r31, r15
     cfa:	c9 f7       	brne	.-14     	; 0xcee <main+0x370>
     cfc:	8e 01       	movw	r16, r28
			//현재 모터 값으로 수정을 해야한다.
			packet.data.pos = g_Pdes * 1000;    
			packet.data.velo = g_Vlimit * 1000; 
			packet.data.cur = g_Climit * 1000;  
			
			for (int i = 8; i < sizeof(Packet_t); i++)
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	f8 01       	movw	r30, r16
     d04:	81 91       	ld	r24, Z+
     d06:	8f 01       	movw	r16, r30
     d08:	59 d0       	rcall	.+178    	; 0xdbc <TransUart0>
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
				TransUart0(packet.buffer[i]);
     d0a:	0e 15       	cp	r16, r14
     d0c:	1f 05       	cpc	r17, r15
     d0e:	c9 f7       	brne	.-14     	; 0xd02 <main+0x384>
     d10:	a0 cf       	rjmp	.-192    	; 0xc52 <main+0x2d4>

00000d12 <InitIO>:
     d12:	8f ef       	ldi	r24, 0xFF	; 255
			packet.data.cur = g_Climit * 1000;  
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++){
     d14:	8a bb       	out	0x1a, r24	; 26
     d16:	84 bb       	out	0x14, r24	; 20
     d18:	88 e0       	ldi	r24, 0x08	; 8
     d1a:	81 bb       	out	0x11, r24	; 17
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     d1c:	87 e6       	ldi	r24, 0x67	; 103
     d1e:	87 bb       	out	0x17, r24	; 23
     d20:	8a e1       	ldi	r24, 0x1A	; 26
     d22:	82 b9       	out	0x02, r24	; 2
     d24:	1b ba       	out	0x1b, r1	; 27
     d26:	87 e0       	ldi	r24, 0x07	; 7
     d28:	88 bb       	out	0x18, r24	; 24
     d2a:	08 95       	ret

00000d2c <InitTimer0>:
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	83 bf       	out	0x33, r24	; 51
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	87 bf       	out	0x37, r24	; 55
     d34:	08 95       	ret

00000d36 <InitTimer1>:
     d36:	82 ee       	ldi	r24, 0xE2	; 226
     d38:	8f bd       	out	0x2f, r24	; 47
     d3a:	81 e1       	ldi	r24, 0x11	; 17
     d3c:	8e bd       	out	0x2e, r24	; 46
     d3e:	8f e8       	ldi	r24, 0x8F	; 143
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	97 bd       	out	0x27, r25	; 39
     d44:	86 bd       	out	0x26, r24	; 38
     d46:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d4a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d4e:	1b bc       	out	0x2b, r1	; 43
     d50:	1a bc       	out	0x2a, r1	; 42
     d52:	19 bc       	out	0x29, r1	; 41
     d54:	18 bc       	out	0x28, r1	; 40
     d56:	1d bc       	out	0x2d, r1	; 45
     d58:	1c bc       	out	0x2c, r1	; 44
     d5a:	08 95       	ret

00000d5c <InitTimer3>:
     d5c:	82 eb       	ldi	r24, 0xB2	; 178
     d5e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d62:	81 e1       	ldi	r24, 0x11	; 17
     d64:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d68:	8f e8       	ldi	r24, 0x8F	; 143
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d74:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d78:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     d7c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d80:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d84:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d88:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d8c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d90:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d94:	08 95       	ret

00000d96 <InitADC>:
     d96:	80 e4       	ldi	r24, 0x40	; 64
     d98:	87 b9       	out	0x07, r24	; 7
     d9a:	86 e8       	ldi	r24, 0x86	; 134
     d9c:	86 b9       	out	0x06, r24	; 6
     d9e:	08 95       	ret

00000da0 <InitUart0>:
     da0:	1b b8       	out	0x0b, r1	; 11
     da2:	88 e9       	ldi	r24, 0x98	; 152
     da4:	8a b9       	out	0x0a, r24	; 10
     da6:	86 e0       	ldi	r24, 0x06	; 6
     da8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     dac:	87 e6       	ldi	r24, 0x67	; 103
     dae:	89 b9       	out	0x09, r24	; 9
     db0:	08 95       	ret

00000db2 <InitSPI>:
     db2:	80 e5       	ldi	r24, 0x50	; 80
     db4:	8d b9       	out	0x0d, r24	; 13
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	8e b9       	out	0x0e, r24	; 14
     dba:	08 95       	ret

00000dbc <TransUart0>:
     dbc:	5d 9b       	sbis	0x0b, 5	; 11
     dbe:	fe cf       	rjmp	.-4      	; 0xdbc <TransUart0>
     dc0:	8c b9       	out	0x0c, r24	; 12
     dc2:	08 95       	ret

00000dc4 <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     dc4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     dc6:	77 9b       	sbis	0x0e, 7	; 14
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <SPI_MasterSend+0x2>
	data = SPDR;
     dca:	8f b1       	in	r24, 0x0f	; 15
     dcc:	08 95       	ret

00000dce <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     dce:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     dd0:	77 9b       	sbis	0x0e, 7	; 14
     dd2:	fe cf       	rjmp	.-4      	; 0xdd0 <SPI_MasterRecv+0x2>
	return SPDR;
     dd4:	8f b1       	in	r24, 0x0f	; 15
     dd6:	08 95       	ret

00000dd8 <__subsf3>:
     dd8:	50 58       	subi	r21, 0x80	; 128

00000dda <__addsf3>:
     dda:	bb 27       	eor	r27, r27
     ddc:	aa 27       	eor	r26, r26
     dde:	0e d0       	rcall	.+28     	; 0xdfc <__addsf3x>
     de0:	4d c1       	rjmp	.+666    	; 0x107c <__fp_round>
     de2:	3e d1       	rcall	.+636    	; 0x1060 <__fp_pscA>
     de4:	30 f0       	brcs	.+12     	; 0xdf2 <__addsf3+0x18>
     de6:	43 d1       	rcall	.+646    	; 0x106e <__fp_pscB>
     de8:	20 f0       	brcs	.+8      	; 0xdf2 <__addsf3+0x18>
     dea:	31 f4       	brne	.+12     	; 0xdf8 <__addsf3+0x1e>
     dec:	9f 3f       	cpi	r25, 0xFF	; 255
     dee:	11 f4       	brne	.+4      	; 0xdf4 <__addsf3+0x1a>
     df0:	1e f4       	brtc	.+6      	; 0xdf8 <__addsf3+0x1e>
     df2:	33 c1       	rjmp	.+614    	; 0x105a <__fp_nan>
     df4:	0e f4       	brtc	.+2      	; 0xdf8 <__addsf3+0x1e>
     df6:	e0 95       	com	r30
     df8:	e7 fb       	bst	r30, 7
     dfa:	29 c1       	rjmp	.+594    	; 0x104e <__fp_inf>

00000dfc <__addsf3x>:
     dfc:	e9 2f       	mov	r30, r25
     dfe:	4f d1       	rcall	.+670    	; 0x109e <__fp_split3>
     e00:	80 f3       	brcs	.-32     	; 0xde2 <__addsf3+0x8>
     e02:	ba 17       	cp	r27, r26
     e04:	62 07       	cpc	r22, r18
     e06:	73 07       	cpc	r23, r19
     e08:	84 07       	cpc	r24, r20
     e0a:	95 07       	cpc	r25, r21
     e0c:	18 f0       	brcs	.+6      	; 0xe14 <__addsf3x+0x18>
     e0e:	71 f4       	brne	.+28     	; 0xe2c <__addsf3x+0x30>
     e10:	9e f5       	brtc	.+102    	; 0xe78 <__addsf3x+0x7c>
     e12:	67 c1       	rjmp	.+718    	; 0x10e2 <__fp_zero>
     e14:	0e f4       	brtc	.+2      	; 0xe18 <__addsf3x+0x1c>
     e16:	e0 95       	com	r30
     e18:	0b 2e       	mov	r0, r27
     e1a:	ba 2f       	mov	r27, r26
     e1c:	a0 2d       	mov	r26, r0
     e1e:	0b 01       	movw	r0, r22
     e20:	b9 01       	movw	r22, r18
     e22:	90 01       	movw	r18, r0
     e24:	0c 01       	movw	r0, r24
     e26:	ca 01       	movw	r24, r20
     e28:	a0 01       	movw	r20, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	ff 27       	eor	r31, r31
     e2e:	59 1b       	sub	r21, r25
     e30:	99 f0       	breq	.+38     	; 0xe58 <__addsf3x+0x5c>
     e32:	59 3f       	cpi	r21, 0xF9	; 249
     e34:	50 f4       	brcc	.+20     	; 0xe4a <__addsf3x+0x4e>
     e36:	50 3e       	cpi	r21, 0xE0	; 224
     e38:	68 f1       	brcs	.+90     	; 0xe94 <__addsf3x+0x98>
     e3a:	1a 16       	cp	r1, r26
     e3c:	f0 40       	sbci	r31, 0x00	; 0
     e3e:	a2 2f       	mov	r26, r18
     e40:	23 2f       	mov	r18, r19
     e42:	34 2f       	mov	r19, r20
     e44:	44 27       	eor	r20, r20
     e46:	58 5f       	subi	r21, 0xF8	; 248
     e48:	f3 cf       	rjmp	.-26     	; 0xe30 <__addsf3x+0x34>
     e4a:	46 95       	lsr	r20
     e4c:	37 95       	ror	r19
     e4e:	27 95       	ror	r18
     e50:	a7 95       	ror	r26
     e52:	f0 40       	sbci	r31, 0x00	; 0
     e54:	53 95       	inc	r21
     e56:	c9 f7       	brne	.-14     	; 0xe4a <__addsf3x+0x4e>
     e58:	7e f4       	brtc	.+30     	; 0xe78 <__addsf3x+0x7c>
     e5a:	1f 16       	cp	r1, r31
     e5c:	ba 0b       	sbc	r27, r26
     e5e:	62 0b       	sbc	r22, r18
     e60:	73 0b       	sbc	r23, r19
     e62:	84 0b       	sbc	r24, r20
     e64:	ba f0       	brmi	.+46     	; 0xe94 <__addsf3x+0x98>
     e66:	91 50       	subi	r25, 0x01	; 1
     e68:	a1 f0       	breq	.+40     	; 0xe92 <__addsf3x+0x96>
     e6a:	ff 0f       	add	r31, r31
     e6c:	bb 1f       	adc	r27, r27
     e6e:	66 1f       	adc	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	c2 f7       	brpl	.-16     	; 0xe66 <__addsf3x+0x6a>
     e76:	0e c0       	rjmp	.+28     	; 0xe94 <__addsf3x+0x98>
     e78:	ba 0f       	add	r27, r26
     e7a:	62 1f       	adc	r22, r18
     e7c:	73 1f       	adc	r23, r19
     e7e:	84 1f       	adc	r24, r20
     e80:	48 f4       	brcc	.+18     	; 0xe94 <__addsf3x+0x98>
     e82:	87 95       	ror	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b7 95       	ror	r27
     e8a:	f7 95       	ror	r31
     e8c:	9e 3f       	cpi	r25, 0xFE	; 254
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <__addsf3x+0x96>
     e90:	b3 cf       	rjmp	.-154    	; 0xdf8 <__addsf3+0x1e>
     e92:	93 95       	inc	r25
     e94:	88 0f       	add	r24, r24
     e96:	08 f0       	brcs	.+2      	; 0xe9a <__addsf3x+0x9e>
     e98:	99 27       	eor	r25, r25
     e9a:	ee 0f       	add	r30, r30
     e9c:	97 95       	ror	r25
     e9e:	87 95       	ror	r24
     ea0:	08 95       	ret

00000ea2 <__divsf3>:
     ea2:	0c d0       	rcall	.+24     	; 0xebc <__divsf3x>
     ea4:	eb c0       	rjmp	.+470    	; 0x107c <__fp_round>
     ea6:	e3 d0       	rcall	.+454    	; 0x106e <__fp_pscB>
     ea8:	40 f0       	brcs	.+16     	; 0xeba <__divsf3+0x18>
     eaa:	da d0       	rcall	.+436    	; 0x1060 <__fp_pscA>
     eac:	30 f0       	brcs	.+12     	; 0xeba <__divsf3+0x18>
     eae:	21 f4       	brne	.+8      	; 0xeb8 <__divsf3+0x16>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	19 f0       	breq	.+6      	; 0xeba <__divsf3+0x18>
     eb4:	cc c0       	rjmp	.+408    	; 0x104e <__fp_inf>
     eb6:	51 11       	cpse	r21, r1
     eb8:	15 c1       	rjmp	.+554    	; 0x10e4 <__fp_szero>
     eba:	cf c0       	rjmp	.+414    	; 0x105a <__fp_nan>

00000ebc <__divsf3x>:
     ebc:	f0 d0       	rcall	.+480    	; 0x109e <__fp_split3>
     ebe:	98 f3       	brcs	.-26     	; 0xea6 <__divsf3+0x4>

00000ec0 <__divsf3_pse>:
     ec0:	99 23       	and	r25, r25
     ec2:	c9 f3       	breq	.-14     	; 0xeb6 <__divsf3+0x14>
     ec4:	55 23       	and	r21, r21
     ec6:	b1 f3       	breq	.-20     	; 0xeb4 <__divsf3+0x12>
     ec8:	95 1b       	sub	r25, r21
     eca:	55 0b       	sbc	r21, r21
     ecc:	bb 27       	eor	r27, r27
     ece:	aa 27       	eor	r26, r26
     ed0:	62 17       	cp	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	38 f0       	brcs	.+14     	; 0xee6 <__divsf3_pse+0x26>
     ed8:	9f 5f       	subi	r25, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	44 1f       	adc	r20, r20
     ee2:	aa 1f       	adc	r26, r26
     ee4:	a9 f3       	breq	.-22     	; 0xed0 <__divsf3_pse+0x10>
     ee6:	33 d0       	rcall	.+102    	; 0xf4e <__divsf3_pse+0x8e>
     ee8:	0e 2e       	mov	r0, r30
     eea:	3a f0       	brmi	.+14     	; 0xefa <__divsf3_pse+0x3a>
     eec:	e0 e8       	ldi	r30, 0x80	; 128
     eee:	30 d0       	rcall	.+96     	; 0xf50 <__divsf3_pse+0x90>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	50 40       	sbci	r21, 0x00	; 0
     ef4:	e6 95       	lsr	r30
     ef6:	00 1c       	adc	r0, r0
     ef8:	ca f7       	brpl	.-14     	; 0xeec <__divsf3_pse+0x2c>
     efa:	29 d0       	rcall	.+82     	; 0xf4e <__divsf3_pse+0x8e>
     efc:	fe 2f       	mov	r31, r30
     efe:	27 d0       	rcall	.+78     	; 0xf4e <__divsf3_pse+0x8e>
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	bb 1f       	adc	r27, r27
     f08:	26 17       	cp	r18, r22
     f0a:	37 07       	cpc	r19, r23
     f0c:	48 07       	cpc	r20, r24
     f0e:	ab 07       	cpc	r26, r27
     f10:	b0 e8       	ldi	r27, 0x80	; 128
     f12:	09 f0       	breq	.+2      	; 0xf16 <__divsf3_pse+0x56>
     f14:	bb 0b       	sbc	r27, r27
     f16:	80 2d       	mov	r24, r0
     f18:	bf 01       	movw	r22, r30
     f1a:	ff 27       	eor	r31, r31
     f1c:	93 58       	subi	r25, 0x83	; 131
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	2a f0       	brmi	.+10     	; 0xf2c <__divsf3_pse+0x6c>
     f22:	9e 3f       	cpi	r25, 0xFE	; 254
     f24:	51 05       	cpc	r21, r1
     f26:	68 f0       	brcs	.+26     	; 0xf42 <__divsf3_pse+0x82>
     f28:	92 c0       	rjmp	.+292    	; 0x104e <__fp_inf>
     f2a:	dc c0       	rjmp	.+440    	; 0x10e4 <__fp_szero>
     f2c:	5f 3f       	cpi	r21, 0xFF	; 255
     f2e:	ec f3       	brlt	.-6      	; 0xf2a <__divsf3_pse+0x6a>
     f30:	98 3e       	cpi	r25, 0xE8	; 232
     f32:	dc f3       	brlt	.-10     	; 0xf2a <__divsf3_pse+0x6a>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b7 95       	ror	r27
     f3c:	f7 95       	ror	r31
     f3e:	9f 5f       	subi	r25, 0xFF	; 255
     f40:	c9 f7       	brne	.-14     	; 0xf34 <__divsf3_pse+0x74>
     f42:	88 0f       	add	r24, r24
     f44:	91 1d       	adc	r25, r1
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret
     f4e:	e1 e0       	ldi	r30, 0x01	; 1
     f50:	66 0f       	add	r22, r22
     f52:	77 1f       	adc	r23, r23
     f54:	88 1f       	adc	r24, r24
     f56:	bb 1f       	adc	r27, r27
     f58:	62 17       	cp	r22, r18
     f5a:	73 07       	cpc	r23, r19
     f5c:	84 07       	cpc	r24, r20
     f5e:	ba 07       	cpc	r27, r26
     f60:	20 f0       	brcs	.+8      	; 0xf6a <__divsf3_pse+0xaa>
     f62:	62 1b       	sub	r22, r18
     f64:	73 0b       	sbc	r23, r19
     f66:	84 0b       	sbc	r24, r20
     f68:	ba 0b       	sbc	r27, r26
     f6a:	ee 1f       	adc	r30, r30
     f6c:	88 f7       	brcc	.-30     	; 0xf50 <__divsf3_pse+0x90>
     f6e:	e0 95       	com	r30
     f70:	08 95       	ret

00000f72 <__fixsfsi>:
     f72:	04 d0       	rcall	.+8      	; 0xf7c <__fixunssfsi>
     f74:	68 94       	set
     f76:	b1 11       	cpse	r27, r1
     f78:	b5 c0       	rjmp	.+362    	; 0x10e4 <__fp_szero>
     f7a:	08 95       	ret

00000f7c <__fixunssfsi>:
     f7c:	98 d0       	rcall	.+304    	; 0x10ae <__fp_splitA>
     f7e:	88 f0       	brcs	.+34     	; 0xfa2 <__fixunssfsi+0x26>
     f80:	9f 57       	subi	r25, 0x7F	; 127
     f82:	90 f0       	brcs	.+36     	; 0xfa8 <__fixunssfsi+0x2c>
     f84:	b9 2f       	mov	r27, r25
     f86:	99 27       	eor	r25, r25
     f88:	b7 51       	subi	r27, 0x17	; 23
     f8a:	a0 f0       	brcs	.+40     	; 0xfb4 <__fixunssfsi+0x38>
     f8c:	d1 f0       	breq	.+52     	; 0xfc2 <__fixunssfsi+0x46>
     f8e:	66 0f       	add	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	1a f0       	brmi	.+6      	; 0xf9e <__fixunssfsi+0x22>
     f98:	ba 95       	dec	r27
     f9a:	c9 f7       	brne	.-14     	; 0xf8e <__fixunssfsi+0x12>
     f9c:	12 c0       	rjmp	.+36     	; 0xfc2 <__fixunssfsi+0x46>
     f9e:	b1 30       	cpi	r27, 0x01	; 1
     fa0:	81 f0       	breq	.+32     	; 0xfc2 <__fixunssfsi+0x46>
     fa2:	9f d0       	rcall	.+318    	; 0x10e2 <__fp_zero>
     fa4:	b1 e0       	ldi	r27, 0x01	; 1
     fa6:	08 95       	ret
     fa8:	9c c0       	rjmp	.+312    	; 0x10e2 <__fp_zero>
     faa:	67 2f       	mov	r22, r23
     fac:	78 2f       	mov	r23, r24
     fae:	88 27       	eor	r24, r24
     fb0:	b8 5f       	subi	r27, 0xF8	; 248
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <__fixunssfsi+0x46>
     fb4:	b9 3f       	cpi	r27, 0xF9	; 249
     fb6:	cc f3       	brlt	.-14     	; 0xfaa <__fixunssfsi+0x2e>
     fb8:	86 95       	lsr	r24
     fba:	77 95       	ror	r23
     fbc:	67 95       	ror	r22
     fbe:	b3 95       	inc	r27
     fc0:	d9 f7       	brne	.-10     	; 0xfb8 <__fixunssfsi+0x3c>
     fc2:	3e f4       	brtc	.+14     	; 0xfd2 <__fixunssfsi+0x56>
     fc4:	90 95       	com	r25
     fc6:	80 95       	com	r24
     fc8:	70 95       	com	r23
     fca:	61 95       	neg	r22
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	8f 4f       	sbci	r24, 0xFF	; 255
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	08 95       	ret

00000fd4 <__floatunsisf>:
     fd4:	e8 94       	clt
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <__floatsisf+0x12>

00000fd8 <__floatsisf>:
     fd8:	97 fb       	bst	r25, 7
     fda:	3e f4       	brtc	.+14     	; 0xfea <__floatsisf+0x12>
     fdc:	90 95       	com	r25
     fde:	80 95       	com	r24
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	99 23       	and	r25, r25
     fec:	a9 f0       	breq	.+42     	; 0x1018 <__floatsisf+0x40>
     fee:	f9 2f       	mov	r31, r25
     ff0:	96 e9       	ldi	r25, 0x96	; 150
     ff2:	bb 27       	eor	r27, r27
     ff4:	93 95       	inc	r25
     ff6:	f6 95       	lsr	r31
     ff8:	87 95       	ror	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b7 95       	ror	r27
    1000:	f1 11       	cpse	r31, r1
    1002:	f8 cf       	rjmp	.-16     	; 0xff4 <__floatsisf+0x1c>
    1004:	fa f4       	brpl	.+62     	; 0x1044 <__floatsisf+0x6c>
    1006:	bb 0f       	add	r27, r27
    1008:	11 f4       	brne	.+4      	; 0x100e <__floatsisf+0x36>
    100a:	60 ff       	sbrs	r22, 0
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <__floatsisf+0x6c>
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <__floatsisf+0x6c>
    1018:	88 23       	and	r24, r24
    101a:	11 f0       	breq	.+4      	; 0x1020 <__floatsisf+0x48>
    101c:	96 e9       	ldi	r25, 0x96	; 150
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <__floatsisf+0x6a>
    1020:	77 23       	and	r23, r23
    1022:	21 f0       	breq	.+8      	; 0x102c <__floatsisf+0x54>
    1024:	9e e8       	ldi	r25, 0x8E	; 142
    1026:	87 2f       	mov	r24, r23
    1028:	76 2f       	mov	r23, r22
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__floatsisf+0x5e>
    102c:	66 23       	and	r22, r22
    102e:	71 f0       	breq	.+28     	; 0x104c <__floatsisf+0x74>
    1030:	96 e8       	ldi	r25, 0x86	; 134
    1032:	86 2f       	mov	r24, r22
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	2a f0       	brmi	.+10     	; 0x1044 <__floatsisf+0x6c>
    103a:	9a 95       	dec	r25
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	da f7       	brpl	.-10     	; 0x103a <__floatsisf+0x62>
    1044:	88 0f       	add	r24, r24
    1046:	96 95       	lsr	r25
    1048:	87 95       	ror	r24
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret

0000104e <__fp_inf>:
    104e:	97 f9       	bld	r25, 7
    1050:	9f 67       	ori	r25, 0x7F	; 127
    1052:	80 e8       	ldi	r24, 0x80	; 128
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	08 95       	ret

0000105a <__fp_nan>:
    105a:	9f ef       	ldi	r25, 0xFF	; 255
    105c:	80 ec       	ldi	r24, 0xC0	; 192
    105e:	08 95       	ret

00001060 <__fp_pscA>:
    1060:	00 24       	eor	r0, r0
    1062:	0a 94       	dec	r0
    1064:	16 16       	cp	r1, r22
    1066:	17 06       	cpc	r1, r23
    1068:	18 06       	cpc	r1, r24
    106a:	09 06       	cpc	r0, r25
    106c:	08 95       	ret

0000106e <__fp_pscB>:
    106e:	00 24       	eor	r0, r0
    1070:	0a 94       	dec	r0
    1072:	12 16       	cp	r1, r18
    1074:	13 06       	cpc	r1, r19
    1076:	14 06       	cpc	r1, r20
    1078:	05 06       	cpc	r0, r21
    107a:	08 95       	ret

0000107c <__fp_round>:
    107c:	09 2e       	mov	r0, r25
    107e:	03 94       	inc	r0
    1080:	00 0c       	add	r0, r0
    1082:	11 f4       	brne	.+4      	; 0x1088 <__fp_round+0xc>
    1084:	88 23       	and	r24, r24
    1086:	52 f0       	brmi	.+20     	; 0x109c <__fp_round+0x20>
    1088:	bb 0f       	add	r27, r27
    108a:	40 f4       	brcc	.+16     	; 0x109c <__fp_round+0x20>
    108c:	bf 2b       	or	r27, r31
    108e:	11 f4       	brne	.+4      	; 0x1094 <__fp_round+0x18>
    1090:	60 ff       	sbrs	r22, 0
    1092:	04 c0       	rjmp	.+8      	; 0x109c <__fp_round+0x20>
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <__fp_split3>:
    109e:	57 fd       	sbrc	r21, 7
    10a0:	90 58       	subi	r25, 0x80	; 128
    10a2:	44 0f       	add	r20, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	59 f0       	breq	.+22     	; 0x10be <__fp_splitA+0x10>
    10a8:	5f 3f       	cpi	r21, 0xFF	; 255
    10aa:	71 f0       	breq	.+28     	; 0x10c8 <__fp_splitA+0x1a>
    10ac:	47 95       	ror	r20

000010ae <__fp_splitA>:
    10ae:	88 0f       	add	r24, r24
    10b0:	97 fb       	bst	r25, 7
    10b2:	99 1f       	adc	r25, r25
    10b4:	61 f0       	breq	.+24     	; 0x10ce <__fp_splitA+0x20>
    10b6:	9f 3f       	cpi	r25, 0xFF	; 255
    10b8:	79 f0       	breq	.+30     	; 0x10d8 <__fp_splitA+0x2a>
    10ba:	87 95       	ror	r24
    10bc:	08 95       	ret
    10be:	12 16       	cp	r1, r18
    10c0:	13 06       	cpc	r1, r19
    10c2:	14 06       	cpc	r1, r20
    10c4:	55 1f       	adc	r21, r21
    10c6:	f2 cf       	rjmp	.-28     	; 0x10ac <__fp_split3+0xe>
    10c8:	46 95       	lsr	r20
    10ca:	f1 df       	rcall	.-30     	; 0x10ae <__fp_splitA>
    10cc:	08 c0       	rjmp	.+16     	; 0x10de <__fp_splitA+0x30>
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	f1 cf       	rjmp	.-30     	; 0x10ba <__fp_splitA+0xc>
    10d8:	86 95       	lsr	r24
    10da:	71 05       	cpc	r23, r1
    10dc:	61 05       	cpc	r22, r1
    10de:	08 94       	sec
    10e0:	08 95       	ret

000010e2 <__fp_zero>:
    10e2:	e8 94       	clt

000010e4 <__fp_szero>:
    10e4:	bb 27       	eor	r27, r27
    10e6:	66 27       	eor	r22, r22
    10e8:	77 27       	eor	r23, r23
    10ea:	cb 01       	movw	r24, r22
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret

000010f0 <__gesf2>:
    10f0:	66 d0       	rcall	.+204    	; 0x11be <__fp_cmp>
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__gesf2+0x6>
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__mulsf3>:
    10f8:	0b d0       	rcall	.+22     	; 0x1110 <__mulsf3x>
    10fa:	c0 cf       	rjmp	.-128    	; 0x107c <__fp_round>
    10fc:	b1 df       	rcall	.-158    	; 0x1060 <__fp_pscA>
    10fe:	28 f0       	brcs	.+10     	; 0x110a <__stack+0xb>
    1100:	b6 df       	rcall	.-148    	; 0x106e <__fp_pscB>
    1102:	18 f0       	brcs	.+6      	; 0x110a <__stack+0xb>
    1104:	95 23       	and	r25, r21
    1106:	09 f0       	breq	.+2      	; 0x110a <__stack+0xb>
    1108:	a2 cf       	rjmp	.-188    	; 0x104e <__fp_inf>
    110a:	a7 cf       	rjmp	.-178    	; 0x105a <__fp_nan>
    110c:	11 24       	eor	r1, r1
    110e:	ea cf       	rjmp	.-44     	; 0x10e4 <__fp_szero>

00001110 <__mulsf3x>:
    1110:	c6 df       	rcall	.-116    	; 0x109e <__fp_split3>
    1112:	a0 f3       	brcs	.-24     	; 0x10fc <__mulsf3+0x4>

00001114 <__mulsf3_pse>:
    1114:	95 9f       	mul	r25, r21
    1116:	d1 f3       	breq	.-12     	; 0x110c <__stack+0xd>
    1118:	95 0f       	add	r25, r21
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	55 1f       	adc	r21, r21
    111e:	62 9f       	mul	r22, r18
    1120:	f0 01       	movw	r30, r0
    1122:	72 9f       	mul	r23, r18
    1124:	bb 27       	eor	r27, r27
    1126:	f0 0d       	add	r31, r0
    1128:	b1 1d       	adc	r27, r1
    112a:	63 9f       	mul	r22, r19
    112c:	aa 27       	eor	r26, r26
    112e:	f0 0d       	add	r31, r0
    1130:	b1 1d       	adc	r27, r1
    1132:	aa 1f       	adc	r26, r26
    1134:	64 9f       	mul	r22, r20
    1136:	66 27       	eor	r22, r22
    1138:	b0 0d       	add	r27, r0
    113a:	a1 1d       	adc	r26, r1
    113c:	66 1f       	adc	r22, r22
    113e:	82 9f       	mul	r24, r18
    1140:	22 27       	eor	r18, r18
    1142:	b0 0d       	add	r27, r0
    1144:	a1 1d       	adc	r26, r1
    1146:	62 1f       	adc	r22, r18
    1148:	73 9f       	mul	r23, r19
    114a:	b0 0d       	add	r27, r0
    114c:	a1 1d       	adc	r26, r1
    114e:	62 1f       	adc	r22, r18
    1150:	83 9f       	mul	r24, r19
    1152:	a0 0d       	add	r26, r0
    1154:	61 1d       	adc	r22, r1
    1156:	22 1f       	adc	r18, r18
    1158:	74 9f       	mul	r23, r20
    115a:	33 27       	eor	r19, r19
    115c:	a0 0d       	add	r26, r0
    115e:	61 1d       	adc	r22, r1
    1160:	23 1f       	adc	r18, r19
    1162:	84 9f       	mul	r24, r20
    1164:	60 0d       	add	r22, r0
    1166:	21 1d       	adc	r18, r1
    1168:	82 2f       	mov	r24, r18
    116a:	76 2f       	mov	r23, r22
    116c:	6a 2f       	mov	r22, r26
    116e:	11 24       	eor	r1, r1
    1170:	9f 57       	subi	r25, 0x7F	; 127
    1172:	50 40       	sbci	r21, 0x00	; 0
    1174:	8a f0       	brmi	.+34     	; 0x1198 <__mulsf3_pse+0x84>
    1176:	e1 f0       	breq	.+56     	; 0x11b0 <__mulsf3_pse+0x9c>
    1178:	88 23       	and	r24, r24
    117a:	4a f0       	brmi	.+18     	; 0x118e <__mulsf3_pse+0x7a>
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	bb 1f       	adc	r27, r27
    1182:	66 1f       	adc	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	88 1f       	adc	r24, r24
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	a9 f7       	brne	.-22     	; 0x1178 <__mulsf3_pse+0x64>
    118e:	9e 3f       	cpi	r25, 0xFE	; 254
    1190:	51 05       	cpc	r21, r1
    1192:	70 f0       	brcs	.+28     	; 0x11b0 <__mulsf3_pse+0x9c>
    1194:	5c cf       	rjmp	.-328    	; 0x104e <__fp_inf>
    1196:	a6 cf       	rjmp	.-180    	; 0x10e4 <__fp_szero>
    1198:	5f 3f       	cpi	r21, 0xFF	; 255
    119a:	ec f3       	brlt	.-6      	; 0x1196 <__mulsf3_pse+0x82>
    119c:	98 3e       	cpi	r25, 0xE8	; 232
    119e:	dc f3       	brlt	.-10     	; 0x1196 <__mulsf3_pse+0x82>
    11a0:	86 95       	lsr	r24
    11a2:	77 95       	ror	r23
    11a4:	67 95       	ror	r22
    11a6:	b7 95       	ror	r27
    11a8:	f7 95       	ror	r31
    11aa:	e7 95       	ror	r30
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	c1 f7       	brne	.-16     	; 0x11a0 <__mulsf3_pse+0x8c>
    11b0:	fe 2b       	or	r31, r30
    11b2:	88 0f       	add	r24, r24
    11b4:	91 1d       	adc	r25, r1
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	97 f9       	bld	r25, 7
    11bc:	08 95       	ret

000011be <__fp_cmp>:
    11be:	99 0f       	add	r25, r25
    11c0:	00 08       	sbc	r0, r0
    11c2:	55 0f       	add	r21, r21
    11c4:	aa 0b       	sbc	r26, r26
    11c6:	e0 e8       	ldi	r30, 0x80	; 128
    11c8:	fe ef       	ldi	r31, 0xFE	; 254
    11ca:	16 16       	cp	r1, r22
    11cc:	17 06       	cpc	r1, r23
    11ce:	e8 07       	cpc	r30, r24
    11d0:	f9 07       	cpc	r31, r25
    11d2:	c0 f0       	brcs	.+48     	; 0x1204 <__fp_cmp+0x46>
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	e4 07       	cpc	r30, r20
    11da:	f5 07       	cpc	r31, r21
    11dc:	98 f0       	brcs	.+38     	; 0x1204 <__fp_cmp+0x46>
    11de:	62 1b       	sub	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	84 0b       	sbc	r24, r20
    11e4:	95 0b       	sbc	r25, r21
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__fp_cmp+0x38>
    11e8:	0a 26       	eor	r0, r26
    11ea:	61 f0       	breq	.+24     	; 0x1204 <__fp_cmp+0x46>
    11ec:	23 2b       	or	r18, r19
    11ee:	24 2b       	or	r18, r20
    11f0:	25 2b       	or	r18, r21
    11f2:	21 f4       	brne	.+8      	; 0x11fc <__fp_cmp+0x3e>
    11f4:	08 95       	ret
    11f6:	0a 26       	eor	r0, r26
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__fp_cmp+0x3e>
    11fa:	a1 40       	sbci	r26, 0x01	; 1
    11fc:	a6 95       	lsr	r26
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	81 1d       	adc	r24, r1
    1202:	81 1d       	adc	r24, r1
    1204:	08 95       	ret

00001206 <_exit>:
    1206:	f8 94       	cli

00001208 <__stop_program>:
    1208:	ff cf       	rjmp	.-2      	; 0x1208 <__stop_program>
